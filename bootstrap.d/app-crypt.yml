packages:
  - name: gcr3
    architecture: '@OPTION:arch@'
    metadata:
      summary: Libraries for cryptographic UIs and accessing PKCS#11 modules
      description: This package contains libraries used for displaying certificates and accessing key stores. It also provides the viewer for crypto files on the GNOME Desktop.
      spdx: 'LGPL-2.0-or-later GPL-2.0-or-later'
      website: 'https://gitlab.gnome.org/GNOME/gcr'
      maintainer: "Dennis Bonke <dennis@managarm.org>"
      categories: ['app-crypt']
    source:
      subdir: 'ports'
      git: 'https://gitlab.gnome.org/GNOME/gcr.git'
      tag: '3.41.2'
      version: '3.41.2'
      regenerate:
        - args: |
            sed -i 's:"/desktop:"/org:' @THIS_SOURCE_DIR@/schema/*.xml
    tools_required:
      - host-pkg-config
      - system-gcc
      - virtual: pkgconfig-for-target
        triple: '@OPTION:arch-triple@'
      - host-mlibc
      - host-gobject-introspection
      - host-python
      - host-glib
      - host-vala
    pkgs_required:
      - mlibc
      - glib
      - libgcrypt
      - gobject-introspection
      - p11-kit
      - libsecret
      - dbus
      - gtk+-3
      - libxml
    configure:
      - args:
          - 'meson'
          - 'setup'
          - '--cross-file'
          - '@SOURCE_ROOT@/scripts/meson-@OPTION:arch-triple@.cross-file'
          - '--prefix=/usr'
          - '--wrap-mode=nofallback'
          - '--sysconfdir=/etc'
          - '-Dgtk_doc=false'
          - '-Dintrospection=true'
          - '-Dssh_agent=false'
          - '-Dsystemd=disabled'
          - '-Dgtk=true'
          - '@THIS_SOURCE_DIR@'
        environ:
          # Same as below
          RUN_WRAPPER_LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-mlibc/lib:@SYSROOT_DIR@/usr/lib:@SYSROOT_DIR@/usr/lib64:@THIS_BUILD_DIR@/girepository'
          RUN_WRAPPER_INTERP: '@BUILD_ROOT@/tools/host-mlibc/lib/ld.so'
          VALADIR: '@SYSROOT_DIR@/usr/share/vala/vapi'
          # Wrapper to add our valadir
          VAPIGEN: 'cross-vapigen'
    build:
      - args: ['ninja']
        environ:
          # Make python load host libraries instead of the ones in the rootfs
          LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-glib/lib:@BUILD_ROOT@/tools/host-glib/lib/x86_64-linux-gnu:@BUILD_ROOT@/tools/host-gobject-introspection/lib/x86_64-linux-gnu'
          # Library path for our run-wrapper that allows it to load managarm libraries
          RUN_WRAPPER_LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-mlibc/lib:@SYSROOT_DIR@/usr/lib:@SYSROOT_DIR@/usr/lib64:@THIS_BUILD_DIR@/girepository'
          # Similar to above, but using a nasty (but working) hack lets us use a Linux mlibc build to execute an
          # executable that was cross-compiled for managarm
          RUN_WRAPPER_INTERP: '@BUILD_ROOT@/tools/host-mlibc/lib/ld.so'
          # This is a custom environment variable which tells g-ir-scanner what to use instead of ldd
          # We point it at our native ldd-wrapper that's installed as part of host-gobject-introspection
          GI_LDD_WRAPPER: ldd-wrapper
          # This tells g-ir-scanner what program should be used for "cross-launching" the executables it builds
          GI_CROSS_LAUNCHER: run-wrapper
          # Path to the introspection data installed by other packages
          GI_GIR_PATH: '@SYSROOT_DIR@/usr/share/gir-1.0'
          VALADIR: '@SYSROOT_DIR@/usr/share/vala/vapi'
          # Wrapper to add our valadir
          VALAC: 'cross-valac'
          # Wrapper to add our valadir
          VAPIGEN: 'cross-vapigen'
      - args: ['ninja', 'install']
        environ:
          DESTDIR: '@THIS_COLLECT_DIR@'
          # Make python load host libraries instead of the ones in the rootfs
          LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-glib/lib:@BUILD_ROOT@/tools/host-glib/lib/x86_64-linux-gnu:@BUILD_ROOT@/tools/host-gobject-introspection/lib/x86_64-linux-gnu'
          # Library path for our run-wrapper that allows it to load managarm libraries
          RUN_WRAPPER_LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-mlibc/lib:@SYSROOT_DIR@/usr/lib:@SYSROOT_DIR@/usr/lib64:@THIS_BUILD_DIR@/girepository'
          # Similar to above, but using a nasty (but working) hack lets us use a Linux mlibc build to execute an
          # executable that was cross-compiled for managarm
          RUN_WRAPPER_INTERP: '@BUILD_ROOT@/tools/host-mlibc/lib/ld.so'
          # This is a custom environment variable which tells g-ir-scanner what to use instead of ldd
          # We point it at our native ldd-wrapper that's installed as part of host-gobject-introspection
          GI_LDD_WRAPPER: ldd-wrapper
          # This tells g-ir-scanner what program should be used for "cross-launching" the executables it builds
          GI_CROSS_LAUNCHER: run-wrapper
          # Path to the introspection data installed by other packages
          GI_GIR_PATH: '@SYSROOT_DIR@/usr/share/gir-1.0'
          VALADIR: '@SYSROOT_DIR@/usr/share/vala/vapi'
          # Wrapper to add our valadir
          VALAC: 'cross-valac'
          # Wrapper to add our valadir
          VAPIGEN: 'cross-vapigen'

  - name: gcr4
    architecture: '@OPTION:arch@'
    metadata:
      summary: Libraries for cryptographic UIs and accessing PKCS#11 modules
      description: This package contains libraries used for displaying certificates and accessing key stores. It also provides the viewer for crypto files on the GNOME Desktop.
      spdx: 'LGPL-2.0-or-later GPL-2.0-or-later'
      website: 'https://gitlab.gnome.org/GNOME/gcr'
      maintainer: "Dennis Bonke <dennis@managarm.org>"
      categories: ['app-crypt']
    source:
      subdir: 'ports'
      git: 'https://gitlab.gnome.org/GNOME/gcr.git'
      tag: '4.1.0'
      version: '4.1.0'
    tools_required:
      - host-pkg-config
      - system-gcc
      - virtual: pkgconfig-for-target
        triple: '@OPTION:arch-triple@'
      - host-mlibc
      - host-gobject-introspection
      - host-python
      - host-glib
      - host-vala
    pkgs_required:
      - mlibc
      - glib
      - libgcrypt
      - gobject-introspection
      - p11-kit
      - libsecret
      - dbus
      - gtk4
      - libxml
    configure:
      - args:
          - 'meson'
          - 'setup'
          - '--cross-file'
          - '@SOURCE_ROOT@/scripts/meson-@OPTION:arch-triple@.cross-file'
          - '--prefix=/usr'
          - '--wrap-mode=nofallback'
          - '--sysconfdir=/etc'
          - '-Dgtk_doc=false'
          - '-Dintrospection=true'
          - '-Dssh_agent=false'
          - '-Dsystemd=disabled'
          - '@THIS_SOURCE_DIR@'
        environ:
          # Same as below
          RUN_WRAPPER_LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-mlibc/lib:@SYSROOT_DIR@/usr/lib:@SYSROOT_DIR@/usr/lib64:@THIS_BUILD_DIR@/girepository'
          RUN_WRAPPER_INTERP: '@BUILD_ROOT@/tools/host-mlibc/lib/ld.so'
          VALADIR: '@SYSROOT_DIR@/usr/share/vala/vapi'
          # Wrapper to add our valadir
          VAPIGEN: 'cross-vapigen'
    build:
      - args: ['ninja']
        environ:
          # Make python load host libraries instead of the ones in the rootfs
          LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-glib/lib:@BUILD_ROOT@/tools/host-glib/lib/x86_64-linux-gnu:@BUILD_ROOT@/tools/host-gobject-introspection/lib/x86_64-linux-gnu'
          # Library path for our run-wrapper that allows it to load managarm libraries
          RUN_WRAPPER_LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-mlibc/lib:@SYSROOT_DIR@/usr/lib:@SYSROOT_DIR@/usr/lib64:@THIS_BUILD_DIR@/girepository'
          # Similar to above, but using a nasty (but working) hack lets us use a Linux mlibc build to execute an
          # executable that was cross-compiled for managarm
          RUN_WRAPPER_INTERP: '@BUILD_ROOT@/tools/host-mlibc/lib/ld.so'
          # This is a custom environment variable which tells g-ir-scanner what to use instead of ldd
          # We point it at our native ldd-wrapper that's installed as part of host-gobject-introspection
          GI_LDD_WRAPPER: ldd-wrapper
          # This tells g-ir-scanner what program should be used for "cross-launching" the executables it builds
          GI_CROSS_LAUNCHER: run-wrapper
          # Path to the introspection data installed by other packages
          GI_GIR_PATH: '@SYSROOT_DIR@/usr/share/gir-1.0'
          VALADIR: '@SYSROOT_DIR@/usr/share/vala/vapi'
          # Wrapper to add our valadir
          VALAC: 'cross-valac'
          # Wrapper to add our valadir
          VAPIGEN: 'cross-vapigen'
      - args: ['ninja', 'install']
        environ:
          DESTDIR: '@THIS_COLLECT_DIR@'
          # Make python load host libraries instead of the ones in the rootfs
          LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-glib/lib:@BUILD_ROOT@/tools/host-glib/lib/x86_64-linux-gnu:@BUILD_ROOT@/tools/host-gobject-introspection/lib/x86_64-linux-gnu'
          # Library path for our run-wrapper that allows it to load managarm libraries
          RUN_WRAPPER_LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-mlibc/lib:@SYSROOT_DIR@/usr/lib:@SYSROOT_DIR@/usr/lib64:@THIS_BUILD_DIR@/girepository'
          # Similar to above, but using a nasty (but working) hack lets us use a Linux mlibc build to execute an
          # executable that was cross-compiled for managarm
          RUN_WRAPPER_INTERP: '@BUILD_ROOT@/tools/host-mlibc/lib/ld.so'
          # This is a custom environment variable which tells g-ir-scanner what to use instead of ldd
          # We point it at our native ldd-wrapper that's installed as part of host-gobject-introspection
          GI_LDD_WRAPPER: ldd-wrapper
          # This tells g-ir-scanner what program should be used for "cross-launching" the executables it builds
          GI_CROSS_LAUNCHER: run-wrapper
          # Path to the introspection data installed by other packages
          GI_GIR_PATH: '@SYSROOT_DIR@/usr/share/gir-1.0'
          VALADIR: '@SYSROOT_DIR@/usr/share/vala/vapi'
          # Wrapper to add our valadir
          VALAC: 'cross-valac'
          # Wrapper to add our valadir
          VAPIGEN: 'cross-vapigen'

  - name: libsecret
    architecture: '@OPTION:arch@'
    metadata:
      summary: GObject library for accessing the freedesktop.org Secret Service API
      description: This package contains a GObject based library for accessing the Secret Service API.
      spdx: 'LGPL-2.1-or-later'
      website: 'https://wiki.gnome.org/Projects/Libsecret'
      maintainer: "Dennis Bonke <dennis@managarm.org>"
      categories: ['app-crypt']
    source:
      subdir: 'ports'
      git: 'https://gitlab.gnome.org/GNOME/libsecret.git'
      tag: '0.21.3'
      version: '0.21.3'
    tools_required:
      - host-pkg-config
      - system-gcc
      - virtual: pkgconfig-for-target
        triple: '@OPTION:arch-triple@'
      - host-mlibc
      - host-gobject-introspection
      - host-python
      - host-glib
      - host-vala
    pkgs_required:
      - mlibc
      - glib
      - libgcrypt
      - gobject-introspection
      - libxslt
    revision: 2
    configure:
      - args:
          - 'meson'
          - 'setup'
          - '--cross-file'
          - '@SOURCE_ROOT@/scripts/meson-@OPTION:arch-triple@.cross-file'
          - '--prefix=/usr'
          - '--wrap-mode=nofallback'
          - '--sysconfdir=/etc'
          - '-Dgtk_doc=false'
          - '-Dintrospection=true'
          - '-Dvapi=true'
          - '-Dmanpage=false'
          - '@THIS_SOURCE_DIR@'
        environ:
          # Same as below
          RUN_WRAPPER_LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-mlibc/lib:@SYSROOT_DIR@/usr/lib:@SYSROOT_DIR@/usr/lib64:@THIS_BUILD_DIR@/girepository'
          RUN_WRAPPER_INTERP: '@BUILD_ROOT@/tools/host-mlibc/lib/ld.so'
          VALADIR: '@SYSROOT_DIR@/usr/share/vala/vapi'
          # Wrapper to add our valadir
          VAPIGEN: 'cross-vapigen'
    build:
      - args: ['ninja']
        environ:
          # Library path for our run-wrapper that allows it to load managarm libraries
          RUN_WRAPPER_LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-mlibc/lib:@SYSROOT_DIR@/usr/lib:@SYSROOT_DIR@/usr/lib64:@THIS_BUILD_DIR@/girepository'
          # Similar to above, but using a nasty (but working) hack lets us use a Linux mlibc build to execute an
          # executable that was cross-compiled for managarm
          RUN_WRAPPER_INTERP: '@BUILD_ROOT@/tools/host-mlibc/lib/ld.so'
          # This is a custom environment variable which tells g-ir-scanner what to use instead of ldd
          # We point it at our native ldd-wrapper that's installed as part of host-gobject-introspection
          GI_LDD_WRAPPER: ldd-wrapper
          # This tells g-ir-scanner what program should be used for "cross-launching" the executables it builds
          GI_CROSS_LAUNCHER: run-wrapper
          # Path to the introspection data installed by other packages
          GI_GIR_PATH: '@SYSROOT_DIR@/usr/share/gir-1.0'
          VALADIR: '@SYSROOT_DIR@/usr/share/vala/vapi'
          # Wrapper to add our valadir
          VALAC: 'cross-valac'
          # Wrapper to add our valadir
          VAPIGEN: 'cross-vapigen'
      - args: ['ninja', 'install']
        environ:
          DESTDIR: '@THIS_COLLECT_DIR@'
          # Library path for our run-wrapper that allows it to load managarm libraries
          RUN_WRAPPER_LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-mlibc/lib:@SYSROOT_DIR@/usr/lib:@SYSROOT_DIR@/usr/lib64:@THIS_BUILD_DIR@/girepository'
          # Similar to above, but using a nasty (but working) hack lets us use a Linux mlibc build to execute an
          # executable that was cross-compiled for managarm
          RUN_WRAPPER_INTERP: '@BUILD_ROOT@/tools/host-mlibc/lib/ld.so'
          # This is a custom environment variable which tells g-ir-scanner what to use instead of ldd
          # We point it at our native ldd-wrapper that's installed as part of host-gobject-introspection
          GI_LDD_WRAPPER: ldd-wrapper
          # This tells g-ir-scanner what program should be used for "cross-launching" the executables it builds
          GI_CROSS_LAUNCHER: run-wrapper
          # Path to the introspection data installed by other packages
          GI_GIR_PATH: '@SYSROOT_DIR@/usr/share/gir-1.0'
          VALADIR: '@SYSROOT_DIR@/usr/share/vala/vapi'
          # Wrapper to add our valadir
          VALAC: 'cross-valac'
          # Wrapper to add our valadir
          VAPIGEN: 'cross-vapigen'

  - name: p11-kit
    labels: [aarch64]
    architecture: '@OPTION:arch@'
    metadata:
      summary: A standard configuration setup for installing PKCS#11
      description: "This package provides a way to load and enumerate PKCS #11 (a Cryptographic Token Interface Standard) modules."
      spdx: 'MIT'
      website: 'https://p11-glue.github.io/p11-glue/p11-kit.html'
      maintainer: "Dennis Bonke <dennis@managarm.org>"
      categories: ['app-crypt']
    source:
      subdir: ports
      git: 'https://github.com/p11-glue/p11-kit.git'
      tag: '0.25.0'
      version: '0.25.0'
      tools_required:
        - host-autoconf-v2.69
        - host-automake-v1.15
        - host-pkg-config
        - host-libtool
      regenerate:
        - args: ['./autogen.sh']
          environ:
            NOCONFIGURE: 'yes'
    tools_required:
      - system-gcc
    pkgs_required:
      - mlibc
      - libffi
      - libtasn
    revision: 6
    configure:
      - args:
        - '@THIS_SOURCE_DIR@/configure'
        - '--host=@OPTION:arch-triple@'
        - '--prefix=/usr'
        - '--sysconfdir=/etc'
        - '--with-trust-paths=/etc/pki/anchors'
        - '--without-systemd'
        - '--disable-doc-html'
        - '--disable-nls'
        environ:
          ac_cv_func_strerror_r: 'no'
    build:
      - args: ['make', '-j@PARALLELISM@']
      - args: ['make', 'install']
        environ:
          DESTDIR: '@THIS_COLLECT_DIR@'
      - args: ['ln', '-sfv', '/usr/libexec/p11-kit/trust-extract-compat', '@THIS_COLLECT_DIR@/usr/bin/update-ca-certificates']
