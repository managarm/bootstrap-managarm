!<tag:y4.managarm.org:preamble>
import:
  - !managarm
---
sources:
  - name: qca
    subdir: 'ports'
    git: 'https://github.com/KDE/qca.git'
    tag: 'v2.3.10'
    version: '2.3.10'

tools:
  - name: host-qca
    architecture: noarch
    from_source: qca
    tools_required:
      - host-cmake
      - host-qt6
      - host-ninja
    configure:
      - args:
        - 'cmake'
        - '-GNinja'
        - '-DCMAKE_INSTALL_PREFIX=@PREFIX@/usr'
        - '-DBUILD_WITH_QT6=ON'
        - '-DQCA_FEATURE_INSTALL_DIR=@PREFIX@/usr/lib/qt6/mkspecs/features'
        - '-DQCA_PLUGINS_INSTALL_DIR=@PREFIX@/usr/lib/qt6/plugins'
        - '-DUSE_RELATIVE_PATHS=ON'
        - '-DBUILD_TESTS=OFF'
        - '@THIS_SOURCE_DIR@'
    compile:
      - args: ['ninja']
    install:
      - args: ['ninja', 'install']

packages:
  - name: libsecret
    architecture: '@OPTION:arch@'
    metadata:
      summary: GObject library for accessing the freedesktop.org Secret Service API
      description: This package contains a GObject based library for accessing the Secret Service API.
      spdx: 'LGPL-2.1-or-later'
      website: 'https://wiki.gnome.org/Projects/Libsecret'
      maintainer: "Dennis Bonke <dennis@managarm.org>"
      categories: ['app-crypt']
    source:
      subdir: 'ports'
      git: 'https://gitlab.gnome.org/GNOME/libsecret.git'
      tag: '0.21.4'
      version: '0.21.4'
    tools_required:
      - host-pkg-config
      - system-gcc
      - virtual: pkgconfig-for-target
        triple: '@OPTION:arch-triple@'
      - !managarm::arch_dep
        arch: [x86_64]
        item: host-mlibc
      - !managarm::arch_dep
        arch: [x86_64]
        item: host-gobject-introspection
      - host-python
      - host-glib
      - host-vala
    pkgs_required:
      - mlibc
      - glib
      - libgcrypt
      - !managarm::arch_dep
        arch: [x86_64]
        item: gobject-introspection
      - libxslt
    revision: 1
    configure:
      - args:
          - 'meson'
          - 'setup'
          - '--cross-file'
          - '@SOURCE_ROOT@/scripts/meson-@OPTION:arch-triple@.cross-file'
          - '--prefix=/usr'
          - '--wrap-mode=nofallback'
          - '--sysconfdir=/etc'
          - '-Dgtk_doc=false'
          - !managarm::arch_ite
            arch: [x86_64]
            then: '-Dintrospection=true'
            else: '-Dintrospection=false'
          - '-Dvapi=true'
          - '-Dmanpage=false'
          - '@THIS_SOURCE_DIR@'
        environ:
          # Same as below
          RUN_WRAPPER_LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-mlibc/lib:@SYSROOT_DIR@/usr/lib:@SYSROOT_DIR@/usr/lib64:@THIS_BUILD_DIR@/girepository'
          RUN_WRAPPER_INTERP: '@BUILD_ROOT@/tools/host-mlibc/lib/ld.so'
          VALADIR: '@SYSROOT_DIR@/usr/share/vala/vapi'
          # Wrapper to add our valadir
          VAPIGEN: 'cross-vapigen'
    build:
      - args: ['ninja']
        environ:
          # Library path for our run-wrapper that allows it to load managarm libraries
          RUN_WRAPPER_LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-mlibc/lib:@SYSROOT_DIR@/usr/lib:@SYSROOT_DIR@/usr/lib64:@THIS_BUILD_DIR@/girepository'
          # Similar to above, but using a nasty (but working) hack lets us use a Linux mlibc build to execute an
          # executable that was cross-compiled for managarm
          RUN_WRAPPER_INTERP: '@BUILD_ROOT@/tools/host-mlibc/lib/ld.so'
          # This is a custom environment variable which tells g-ir-scanner what to use instead of ldd
          # We point it at our native ldd-wrapper that's installed as part of host-gobject-introspection
          GI_LDD_WRAPPER: ldd-wrapper
          # This tells g-ir-scanner what program should be used for "cross-launching" the executables it builds
          GI_CROSS_LAUNCHER: run-wrapper
          # Path to the introspection data installed by other packages
          GI_GIR_PATH: '@SYSROOT_DIR@/usr/share/gir-1.0'
          VALADIR: '@SYSROOT_DIR@/usr/share/vala/vapi'
          # Wrapper to add our valadir
          VALAC: 'cross-valac'
          # Wrapper to add our valadir
          VAPIGEN: 'cross-vapigen'
      - args: ['ninja', 'install']
        environ:
          DESTDIR: '@THIS_COLLECT_DIR@'
          # Library path for our run-wrapper that allows it to load managarm libraries
          RUN_WRAPPER_LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-mlibc/lib:@SYSROOT_DIR@/usr/lib:@SYSROOT_DIR@/usr/lib64:@THIS_BUILD_DIR@/girepository'
          # Similar to above, but using a nasty (but working) hack lets us use a Linux mlibc build to execute an
          # executable that was cross-compiled for managarm
          RUN_WRAPPER_INTERP: '@BUILD_ROOT@/tools/host-mlibc/lib/ld.so'
          # This is a custom environment variable which tells g-ir-scanner what to use instead of ldd
          # We point it at our native ldd-wrapper that's installed as part of host-gobject-introspection
          GI_LDD_WRAPPER: ldd-wrapper
          # This tells g-ir-scanner what program should be used for "cross-launching" the executables it builds
          GI_CROSS_LAUNCHER: run-wrapper
          # Path to the introspection data installed by other packages
          GI_GIR_PATH: '@SYSROOT_DIR@/usr/share/gir-1.0'
          VALADIR: '@SYSROOT_DIR@/usr/share/vala/vapi'
          # Wrapper to add our valadir
          VALAC: 'cross-valac'
          # Wrapper to add our valadir
          VAPIGEN: 'cross-vapigen'

  - name: p11-kit
    labels: [aarch64, riscv64]
    architecture: '@OPTION:arch@'
    metadata:
      summary: A standard configuration setup for installing PKCS#11
      description: "This package provides a way to load and enumerate PKCS #11 (a Cryptographic Token Interface Standard) modules."
      spdx: 'MIT'
      website: 'https://p11-glue.github.io/p11-glue/p11-kit.html'
      maintainer: "Dennis Bonke <dennis@managarm.org>"
      categories: ['app-crypt']
    source:
      subdir: ports
      git: 'https://github.com/p11-glue/p11-kit.git'
      tag: '0.25.5'
      version: '0.25.5'
    tools_required:
      - system-gcc
      - virtual: pkgconfig-for-target
        triple: '@OPTION:arch-triple@'
    pkgs_required:
      - mlibc
      - libffi
      - libtasn
    revision: 1
    configure:
      - args:
        - 'meson'
        - 'setup'
        - '--cross-file'
        - '@SOURCE_ROOT@/scripts/meson-@OPTION:arch-triple@.cross-file'
        - '--prefix=/usr'
        - '--buildtype=debugoptimized'
        - '--wrap-mode=nofallback'
        - '--sysconfdir=/etc'
        - '-Dtrust_paths=/etc/pki/anchors'
        - '-Dsystemd=disabled'
        - '@THIS_SOURCE_DIR@'
        isolate_network: false
    build:
      - args: ['ninja']
      - args: ['ninja', 'install']
        environ:
          DESTDIR: '@THIS_COLLECT_DIR@'
      - args: ['ln', '-sfv', '/usr/libexec/p11-kit/trust-extract-compat', '@THIS_COLLECT_DIR@/usr/bin/update-ca-certificates']

  - name: qca
    architecture: '@OPTION:arch@'
    metadata:
      summary: Qt Cryptographic Architecture (QCA)
      description: This package provides the Qt Cryptographic Architecture (QCA).
      spdx: 'LGPL-2.1-only'
      website: 'https://userbase.kde.org/QCA'
      maintainer: "Dennis Bonke <dennis@managarm.org>"
      categories: ['app-crypt']
    from_source: qca
    tools_required:
      - system-gcc
      - host-cmake
      - host-qt6
      - host-ecm
    pkgs_required:
      - mlibc
      - qtbase6
      - qt5compat
      - libgcrypt
      - nss
      - openssl
    revision: 1
    configure:
      - args:
        - 'cmake'
        - '-GNinja'
        - '-DCMAKE_INSTALL_PREFIX=/usr'
        - '-DCMAKE_TOOLCHAIN_FILE=@SOURCE_ROOT@/scripts/CMakeToolchain-@OPTION:arch-triple@.txt'
        - '-DCMAKE_BUILD_TYPE=Debug'
        - '-DBUILD_WITH_QT6=ON'
        - '-DQCA_FEATURE_INSTALL_DIR=/usr/lib/qt6/mkspecs/features'
        - '-DQCA_PLUGINS_INSTALL_DIR=/usr/lib/qt6/plugins'
        - '-DUSE_RELATIVE_PATHS=ON'
        - '-DBUILD_TESTS=OFF'
        - '@THIS_SOURCE_DIR@'
    build:
      - args: ['ninja']
      - args: ['ninja', 'install']
        environ:
          DESTDIR: '@THIS_COLLECT_DIR@'
      - args: |
          sed -i '/INTERFACE_INCLUDE_DIRECTORIES/s|"/usr|"${CMAKE_SYSROOT}/usr|g' @THIS_COLLECT_DIR@/usr/lib/cmake/Qca-qt6/Qca-qt6Targets.cmake
