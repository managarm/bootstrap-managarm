packages:
  - name: gnome-desktop
    architecture: '@OPTION:arch@'
    metadata:
      summary: Library with common API for various GNOME modules
      description: This package contains a library that provides an API shared by several applications on the GNOME Desktop.
      spdx: 'LGPL-2.0-or-later GPL-2.0-or-later'
      website: 'https://gitlab.gnome.org/GNOME/gnome-desktop/'
      maintainer: "Dennis Bonke <dennis@managarm.org>"
      categories: ['gnome-base']
    source:
      subdir: 'ports'
      git: 'https://gitlab.gnome.org/GNOME/gnome-desktop.git'
      tag: '44.0'
      version: '44.0'
    tools_required:
      - system-gcc
      - wayland-scanner
      - virtual: pkgconfig-for-target
        triple: "@OPTION:arch-triple@"
      - host-mlibc
      - host-gobject-introspection
      - host-python
    pkgs_required:
      - mlibc
      - glib
      - gtk+-3
      - gtk4
      - gsettings-desktop-schemas
      - xkeyboard-config
      - libxkbcommon
      - iso-codes
      - eudev
      - cairo
      - fontconfig
      - gobject-introspection
    configure:
      - args:
        - 'meson'
        - 'setup'
        - '--cross-file'
        - '@SOURCE_ROOT@/scripts/meson-@OPTION:arch-triple@.cross-file'
        - '--prefix=/usr'
        - '--buildtype=release'
        - '--wrap-mode=nodownload'
        - '-Dintrospection=true'
        - '-Dsystemd=disabled'
        - '-Ddesktop_docs=true'
        - '@THIS_SOURCE_DIR@'
        environ:
          # Same as below
          RUN_WRAPPER_LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-mlibc/lib:@SYSROOT_DIR@/usr/lib:@SYSROOT_DIR@/usr/lib64:@THIS_BUILD_DIR@/girepository'
          RUN_WRAPPER_INTERP: '@BUILD_ROOT@/tools/host-mlibc/lib/ld.so'
    build:
      - args: ['ninja']
        environ:
          # Make python load host libraries instead of the ones in the rootfs
          LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-glib/lib:@BUILD_ROOT@/tools/host-glib/lib/x86_64-linux-gnu:@BUILD_ROOT@/tools/host-gobject-introspection/lib/x86_64-linux-gnu'
          # Library path for our run-wrapper that allows it to load managarm libraries
          RUN_WRAPPER_LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-mlibc/lib:@SYSROOT_DIR@/usr/lib:@SYSROOT_DIR@/usr/lib64:@THIS_BUILD_DIR@/girepository'
          # Similar to above, but using a nasty (but working) hack lets us use a Linux mlibc build to execute an
          # executable that was cross-compiled for managarm
          RUN_WRAPPER_INTERP: '@BUILD_ROOT@/tools/host-mlibc/lib/ld.so'
          # This is a custom environment variable which tells g-ir-scanner what to use instead of ldd
          # We point it at our native ldd-wrapper that's installed as part of host-gobject-introspection
          GI_LDD_WRAPPER: ldd-wrapper
          # This tells g-ir-scanner what program should be used for "cross-launching" the executables it builds
          GI_CROSS_LAUNCHER: run-wrapper
          # Path to the introspection data installed by other packages
          GI_GIR_PATH: '@SYSROOT_DIR@/usr/share/gir-1.0'
      - args: ['ninja', 'install']
        environ:
          DESTDIR: '@THIS_COLLECT_DIR@'

  - name: gsettings-desktop-schemas
    architecture: '@OPTION:arch@'
    metadata:
      summary: Collection of GSettings schemas for GNOME desktop
      description: This package contains a collection of GSettings schemas for settings shared by various components of a GNOME Desktop.
      spdx: 'LGPL-2.1-or-later'
      website: 'https://gitlab.gnome.org/GNOME/gsettings-desktop-schemas'
      maintainer: "Dennis Bonke <dennis@managarm.org>"
      categories: ['gnome-base']
    source:
      subdir: ports
      git: 'https://gitlab.gnome.org/GNOME/gsettings-desktop-schemas.git'
      tag: '45.0'
      version: '45.0'
    tools_required:
      - system-gcc
      - host-libtool
      - host-pkg-config
      - virtual: pkgconfig-for-target
        triple: "@OPTION:arch-triple@"
      - host-mlibc
      - host-gobject-introspection
      - host-python
      - host-glib
    pkgs_required:
      - mlibc
      - glib
      - gobject-introspection
    revision: 1
    configure:
      - args: |
              sed -i -r 's:"(/system):"/org/gnome\1:g' @THIS_SOURCE_DIR@/schemas/*.in
      - args:
        - 'meson'
        - '--cross-file'
        - '@SOURCE_ROOT@/scripts/meson-@OPTION:arch-triple@.cross-file'
        - '--prefix=/usr'
        - '@THIS_SOURCE_DIR@'
        environ:
          # Same as below
          RUN_WRAPPER_LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-mlibc/lib:@SYSROOT_DIR@/usr/lib:@SYSROOT_DIR@/usr/lib64:@THIS_BUILD_DIR@/girepository'
          RUN_WRAPPER_INTERP: '@BUILD_ROOT@/tools/host-mlibc/lib/ld.so'
    build:
      - args: ['ninja']
        environ:
          # Make python load host libraries instead of the ones in the rootfs
          LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-glib/lib:@BUILD_ROOT@/tools/host-glib/lib/x86_64-linux-gnu:@BUILD_ROOT@/tools/host-gobject-introspection/lib/x86_64-linux-gnu'
          # Library path for our run-wrapper that allows it to load managarm libraries
          RUN_WRAPPER_LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-mlibc/lib:@SYSROOT_DIR@/usr/lib:@SYSROOT_DIR@/usr/lib64:@THIS_BUILD_DIR@/girepository'
          # Similar to above, but using a nasty (but working) hack lets us use a Linux mlibc build to execute an
          # executable that was cross-compiled for managarm
          RUN_WRAPPER_INTERP: '@BUILD_ROOT@/tools/host-mlibc/lib/ld.so'
          # This is a custom environment variable which tells g-ir-scanner what to use instead of ldd
          # We point it at our native ldd-wrapper that's installed as part of host-gobject-introspection
          GI_LDD_WRAPPER: ldd-wrapper
          # This tells g-ir-scanner what program should be used for "cross-launching" the executables it builds
          GI_CROSS_LAUNCHER: run-wrapper
          # Path to the introspection data installed by other packages
          GI_GIR_PATH: '@SYSROOT_DIR@/usr/share/gir-1.0'
      - args: ['ninja', 'install']
        environ:
          DESTDIR: '@THIS_COLLECT_DIR@'
    scripts:
        post_install:
          - args: 'glib-compile-schemas /usr/share/glib-2.0/schemas'
