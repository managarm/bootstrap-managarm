tools:
  - name: host-iasl
    labels: [aarch64, riscv64]
    architecture: noarch
    source:
      subdir: ports
      checksum: 'blake2b:6f4b4e329e87875eb14cf45b36f6213943b4c7da6fa7345ec2e888d567b067d243717cdf86b543e64120c27c3ef378eeedbae80fcc620140d549bc7a6fb53f5e'
      url: https://github.com/user-attachments/files/17171017/acpica-unix2-20240927.tar.gz
      format: tar.gz
      extract_path: 'acpica-unix2-20240927'
    configure:
      - args: ['cp', '-r', '@THIS_SOURCE_DIR@/.', '@THIS_BUILD_DIR@']
    compile:
      - args: ['make', 'iasl']
    install:
      - args: ['make', 'install', 'PREFIX=@PREFIX@']

  - name: ovmf
    labels: [aarch64, riscv64]
    architecture: '@OPTION:arch@'
    source:
      subdir: ports
      git: 'https://github.com/tianocore/edk2.git'
      tag: 'edk2-stable202408'
      version: '2024.08'
      patch_keep_crlf: true
      # don't judge, submodules are borked so we gotta do it manually
      # which is why we need to run this in regenerate instead of checkout
      regenerate:
        - args:
          - 'git'
          - 'submodule'
          - 'update'
          - '--init'
          - 'BaseTools/Source/C/BrotliCompress/brotli'
          - 'CryptoPkg/Library/MbedTlsLib/mbedtls'
          - 'CryptoPkg/Library/OpensslLib/openssl'
          - 'MdeModulePkg/Library/BrotliCustomDecompressLib/brotli'
          - 'MdeModulePkg/Universal/RegularExpressionDxe/oniguruma'
          - 'MdePkg/Library/BaseFdtLib/libfdt'
          - 'MdePkg/Library/MipiSysTLib/mipisyst'
          - 'RedfishPkg/Library/JsonLib/jansson'
          - 'SecurityPkg/DeviceSecurity/SpdmLib/libspdm'
          - 'ArmPkg/Library/ArmSoftFloatLib/berkeley-softfloat-3'
          isolate_network: false
    tools_required:
      - host-llvm-toolchain
      - host-python
      - host-iasl
    revision: 3
    configure:
      - args: ['cp', '-r', '@THIS_SOURCE_DIR@/.', '@THIS_BUILD_DIR@']
    compile:
      - args: |
          OVMF_ARCH=""
          OVMF_PKG=""
          case "@OPTION:arch@" in
            "x86_64")
              OVMF_ARCH="X64"
              OVMF_PKG="OvmfPkg/OvmfPkgX64"
              ;;
            "aarch64")
              OVMF_ARCH="AARCH64"
              OVMF_PKG="ArmVirtPkg/ArmVirtQemu"
              ;;
            "riscv64")
              OVMF_ARCH="RISCV64"
              OVMF_PKG="OvmfPkg/RiscVVirt/RiscVVirtQemu"
              ;;
            *)
              echo "Unhandled architecture"
              exit 1
              ;;
          esac
          . @THIS_BUILD_DIR@/edksetup.sh
          make -C @THIS_BUILD_DIR@/BaseTools
          build -a $OVMF_ARCH -b DEBUG -p $OVMF_PKG.dsc -t CLANGDWARF -DNETWORK_HTTP_BOOT_ENABLE
        environ:
          PYTHON_COMMAND: 'python3'
    install:
      - args: |
          ARCH="@OPTION:arch@"
          TRUNCATE_SIZE=""
          case "$ARCH" in
            "x86_64")
              OVMF_CODE="OvmfX64/DEBUG_CLANGDWARF/FV/OVMF_CODE.fd"
              OVMF_VARS="OvmfX64/DEBUG_CLANGDWARF/FV/OVMF_VARS.fd"
              ;;
            "aarch64")
              OVMF_CODE="ArmVirtQemu-AARCH64/DEBUG_CLANGDWARF/FV/QEMU_EFI.fd"
              OVMF_VARS="ArmVirtQemu-AARCH64/DEBUG_CLANGDWARF/FV/QEMU_VARS.fd"
              TRUNCATE_SIZE="64M"
              ;;
            "riscv64")
              OVMF_CODE="RiscVVirtQemu/DEBUG_CLANGDWARF/FV/RISCV_VIRT_CODE.fd"
              OVMF_VARS="RiscVVirtQemu/DEBUG_CLANGDWARF/FV/RISCV_VIRT_VARS.fd"
              TRUNCATE_SIZE="32M"
              ;;
            *)
              echo "Unhandled architecture"
              exit 1
              ;;
          esac
          cp "@THIS_BUILD_DIR@/Build/$OVMF_CODE" @PREFIX@/OVMF_CODE_@OPTION:arch@.fd
          cp "@THIS_BUILD_DIR@/Build/$OVMF_VARS" @PREFIX@/OVMF_VARS_@OPTION:arch@.fd
          if [[ ! -z $TRUNCATE_SIZE ]]; then
            truncate -s $TRUNCATE_SIZE @PREFIX@/OVMF_CODE_@OPTION:arch@.fd
            truncate -s $TRUNCATE_SIZE @PREFIX@/OVMF_VARS_@OPTION:arch@.fd
          fi
          mkdir @PREFIX@/bin
          cp "@THIS_BUILD_DIR@/BaseTools/Source/C/bin/GenFw" "@PREFIX@/bin/"
