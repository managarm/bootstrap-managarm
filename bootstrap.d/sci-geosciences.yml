packages:
  - name: geocode-glib
    architecture: '@OPTION:arch@'
    metadata:
     summary: GLib helper library for geocoding services
     description: This package contains a convenience library for the Yahoo! Place Finder APIs. The Place Finder web service allows to do geocoding (finding longitude and latitude from an address), and reverse geocoding (finding an address from coordinates).
     spdx: 'LGPL-2.0-or-later'
     website: 'https://gitlab.gnome.org/GNOME/geocode-glib'
     maintainer: "Dennis Bonke <dennis@managarm.org>"
     categories: ['sci-geosciences']
    source:
      subdir: ports
      git: 'https://gitlab.gnome.org/GNOME/geocode-glib.git'
      tag: '3.26.4'
      version: '3.26.4'
    tools_required:
      - system-gcc
      - host-libtool
      - host-pkg-config
      - virtual: pkgconfig-for-target
        triple: "@OPTION:arch-triple@"
      - host-mlibc
      - host-gobject-introspection
      - host-python
    pkgs_required:
      - mlibc
      - json-glib
      - libsoup3
    configure:
      - args:
        - 'meson'
        - 'setup'
        - '--cross-file'
        - '@SOURCE_ROOT@/scripts/meson-@OPTION:arch-triple@.cross-file'
        - '--prefix=/usr'
        - '-Denable-gtk-doc=false'
        - '-Dsoup2=false'
        - '-Denable-introspection=true'
        - '@THIS_SOURCE_DIR@'
        environ:
          # Same as below
          RUN_WRAPPER_LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-mlibc/lib:@SYSROOT_DIR@/usr/lib:@SYSROOT_DIR@/usr/lib64:@THIS_BUILD_DIR@/girepository'
          RUN_WRAPPER_INTERP: '@BUILD_ROOT@/tools/host-mlibc/lib/ld.so'
    build:
      - args: ['ninja']
        environ:
          # Make python load host libraries instead of the ones in the rootfs
          LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-glib/lib:@BUILD_ROOT@/tools/host-glib/lib/x86_64-linux-gnu:@BUILD_ROOT@/tools/host-gobject-introspection/lib/x86_64-linux-gnu'
          # Library path for our run-wrapper that allows it to load managarm libraries
          RUN_WRAPPER_LD_LIBRARY_PATH: '@BUILD_ROOT@/tools/host-mlibc/lib:@SYSROOT_DIR@/usr/lib:@SYSROOT_DIR@/usr/lib64:@THIS_BUILD_DIR@/girepository'
          # Similar to above, but using a nasty (but working) hack lets us use a Linux mlibc build to execute an
          # executable that was cross-compiled for managarm
          RUN_WRAPPER_INTERP: '@BUILD_ROOT@/tools/host-mlibc/lib/ld.so'
          # This is a custom environment variable which tells g-ir-scanner what to use instead of ldd
          # We point it at our native ldd-wrapper that's installed as part of host-gobject-introspection
          GI_LDD_WRAPPER: ldd-wrapper
          # This tells g-ir-scanner what program should be used for "cross-launching" the executables it builds
          GI_CROSS_LAUNCHER: run-wrapper
          # Path to the introspection data installed by other packages
          GI_GIR_PATH: '@SYSROOT_DIR@/usr/share/gir-1.0'
      - args: ['ninja', 'install']
        environ:
          DESTDIR: '@THIS_COLLECT_DIR@'
