From 26ad1866c83173941c0aef6a1343b934b4decd7e Mon Sep 17 00:00:00 2001
From: Dennis Bonke <admin@dennisbonke.com>
Date: Fri, 10 Jan 2025 00:55:19 +0100
Subject: [PATCH 2/5] Add support for systemd boot for Managarm

---
 src/basic/capability-util.c              |  2 ++
 src/basic/process-util.c                 |  8 ++++++--
 src/basic/raw-clone.h                    |  6 ++----
 src/basic/stdio-util.h                   |  1 +
 src/core/exec-credential.c               |  4 ++++
 src/core/exec-invoke.c                   | 11 ++++++++++
 src/core/main.c                          |  3 +++
 src/journal/journald-server.c            |  9 ++++++++
 src/journal/journald.conf                |  6 +++---
 src/libsystemd/sd-journal/journal-send.c |  1 +
 src/shared/async.c                       |  4 ++++
 src/shared/mount-setup.c                 | 10 +++++++++
 src/shared/mount-util.c                  |  7 +++++++
 src/udev/udev.conf                       |  2 +-
 units/systemd-journald.service.in        | 10 ++++-----
 units/systemd-udevd.service.in           | 26 ++++++++++++------------
 16 files changed, 82 insertions(+), 28 deletions(-)

diff --git a/src/basic/capability-util.c b/src/basic/capability-util.c
index e9b41fe..ed8472c 100644
--- a/src/basic/capability-util.c
+++ b/src/basic/capability-util.c
@@ -333,6 +333,7 @@ int drop_privileges(uid_t uid, gid_t gid, uint64_t keep_capabilities) {
         if (prctl(PR_SET_KEEPCAPS, 0) < 0)
                 return log_error_errno(errno, "Failed to disable keep capabilities flag: %m");
 
+#ifndef __managarm__
         /* Drop all caps from the bounding set (as well as the inheritable/permitted/effective sets), except
          * the ones we want to keep */
         r = capability_bounding_set_drop(keep_capabilities, true);
@@ -365,6 +366,7 @@ int drop_privileges(uid_t uid, gid_t gid, uint64_t keep_capabilities) {
                 if (cap_set_proc(d) < 0)
                         return log_error_errno(errno, "Failed to increase capabilities: %m");
         }
+#endif
 
         return 0;
 }
diff --git a/src/basic/process-util.c b/src/basic/process-util.c
index d9e8bc9..9489237 100644
--- a/src/basic/process-util.c
+++ b/src/basic/process-util.c
@@ -1621,6 +1621,8 @@ int safe_fork_full(
                 }
         }
 
+// TODO: Managarm dies if the first or third argument to mount are null, untill we implement that, we should comment it out.
+#ifndef __managarm__
         if (FLAGS_SET(flags, FORK_NEW_MOUNTNS | FORK_MOUNTNS_SLAVE)) {
                 /* Optionally, make sure we never propagate mounts to the host. */
                 if (mount(NULL, "/", NULL, MS_SLAVE | MS_REC, NULL) < 0) {
@@ -1628,6 +1630,7 @@ int safe_fork_full(
                         _exit(EXIT_FAILURE);
                 }
         }
+#endif
 
         if (FLAGS_SET(flags, FORK_PRIVATE_TMP)) {
                 assert(FLAGS_SET(flags, FORK_NEW_MOUNTNS));
@@ -1965,8 +1968,9 @@ _noreturn_ void freeze(void) {
         }
 
         /* waitid() failed with an unexpected error, things are really borked. Freeze now! */
-        for (;;)
-                pause();
+        // TODO: Implement sys_pause
+        for (;;);
+                // pause();
 }
 
 int get_process_threads(pid_t pid) {
diff --git a/src/basic/raw-clone.h b/src/basic/raw-clone.h
index c5bfc10..c03adcc 100644
--- a/src/basic/raw-clone.h
+++ b/src/basic/raw-clone.h
@@ -78,11 +78,9 @@ static inline pid_t raw_clone(unsigned long flags) {
         }
 #elif defined(__managarm__)
         int helout = open("/dev/helout", O_RDWR);
-        dprintf(helout, "systemd: clone unsupported\n");
+        dprintf(helout, "systemd: clone unsupported, falling back to fork\n");
         close(helout);
-
-        errno = ENOSYS;
-        ret = -1;
+        ret = fork();
 #else
         ret = (pid_t) syscall(__NR_clone, flags, NULL);
 #endif
diff --git a/src/basic/stdio-util.h b/src/basic/stdio-util.h
index 0a2239d..2e55e94 100644
--- a/src/basic/stdio-util.h
+++ b/src/basic/stdio-util.h
@@ -7,6 +7,7 @@
 #include <sys/types.h>
 
 #include "macro.h"
+#include "parse-printf-format.h"
 
 _printf_(3, 4)
 static inline char* snprintf_ok(char *buf, size_t len, const char *format, ...) {
diff --git a/src/core/exec-credential.c b/src/core/exec-credential.c
index 6157ac4..d508df7 100644
--- a/src/core/exec-credential.c
+++ b/src/core/exec-credential.c
@@ -908,6 +908,7 @@ static int setup_credentials_internal(
 
         if (workspace_mounted) {
                 if (!final_mounted) {
+#ifndef __managarm__
                         /* Make workspace read-only now, so that any bind mount we make from it defaults to
                          * read-only too */
                         r = mount_nofollow_verbose(LOG_DEBUG, NULL, workspace, NULL, MS_BIND|MS_REMOUNT|credentials_fs_mount_flags(/* ro= */ true), NULL);
@@ -916,6 +917,7 @@ static int setup_credentials_internal(
 
                         /* And mount it to the final place, read-only */
                         r = mount_nofollow_verbose(LOG_DEBUG, workspace, final, NULL, MS_MOVE, NULL);
+#endif
                 } else
                         /* Otherwise we just get rid of the bind mount of final place */
                         r = umount_verbose(LOG_DEBUG, workspace, MNT_DETACH|UMOUNT_NOFOLLOW);
@@ -1036,9 +1038,11 @@ int exec_setup_credentials(
                  * no one else sees this should be OK to do. */
 
                 /* Turn off propagation from our namespace to host */
+#ifndef __managarm__
                 r = mount_nofollow_verbose(LOG_DEBUG, NULL, "/dev", NULL, MS_SLAVE|MS_REC, NULL);
                 if (r < 0)
                         goto child_fail;
+#endif
 
                 r = setup_credentials_internal(
                                 context,
diff --git a/src/core/exec-invoke.c b/src/core/exec-invoke.c
index 98d6485..03760dd 100644
--- a/src/core/exec-invoke.c
+++ b/src/core/exec-invoke.c
@@ -226,8 +226,13 @@ static int connect_logger_as(
         if (r < 0)
                 return r;
 
+        // TODO: Managarm does not implement shutdown
+#ifdef __managarm__
+        log_debug("Not shutting down socket as shutdown is not implemented!");
+#else
         if (shutdown(fd, SHUT_RD) < 0)
                 return -errno;
+#endif
 
         (void) fd_inc_sndbuf(fd, SNDBUF_SIZE);
 
@@ -4690,6 +4695,7 @@ int exec_invoke(
 #endif
         }
 
+#ifndef __managarm__
         if (needs_sandboxing) {
                 int which_failed;
 
@@ -4702,6 +4708,7 @@ int exec_invoke(
                         return log_exec_error_errno(context, params, r, "Failed to adjust resource limit RLIMIT_%s: %m", rlimit_to_string(which_failed));
                 }
         }
+#endif
 
         if (needs_setuid && context->pam_name && username) {
                 /* Let's call into PAM after we set up our own idea of resource limits so that pam_limits
@@ -5008,6 +5015,7 @@ int exec_invoke(
                 }
 #endif
 
+#ifndef __managarm__
                 if (!cap_test_all(bset)) {
                         r = capability_bounding_set_drop(bset, /* right_now= */ false);
                         if (r < 0) {
@@ -5015,6 +5023,7 @@ int exec_invoke(
                                 return log_exec_error_errno(context, params, r, "Failed to drop capabilities: %m");
                         }
                 }
+#endif
 
                 /* Ambient capabilities are cleared during setresuid() (in enforce_user()) even with
                  * keep-caps set.
@@ -5132,6 +5141,7 @@ int exec_invoke(
                 }
 #endif
 
+#ifndef __managarm__
                 /* PR_GET_SECUREBITS is not privileged, while PR_SET_SECUREBITS is. So to suppress potential
                  * EPERMs we'll try not to call PR_SET_SECUREBITS unless necessary. Setting securebits
                  * requires CAP_SETPCAP. */
@@ -5163,6 +5173,7 @@ int exec_invoke(
                                 *exit_status = EXIT_NO_NEW_PRIVILEGES;
                                 return log_exec_error_errno(context, params, errno, "Failed to disable new privileges: %m");
                         }
+#endif
 
 #if HAVE_SECCOMP
                 r = apply_address_families(context, params);
diff --git a/src/core/main.c b/src/core/main.c
index 5b11c79..d79d48b 100644
--- a/src/core/main.c
+++ b/src/core/main.c
@@ -2380,7 +2380,10 @@ static int initialize_runtime(
                         (void) hostname_setup(true);
                         /* Force transient machine-id on first boot. */
                         machine_id_setup(/* root= */ NULL, /* force_transient= */ first_boot, arg_machine_id, /* ret_machine_id */ NULL);
+// Managarm does not support loopback devices yet
+#ifndef __managarm__
                         (void) loopback_setup();
+#endif
                         bump_unix_max_dgram_qlen();
                         bump_file_max_and_nr_open();
                         test_usr();
diff --git a/src/journal/journald-server.c b/src/journal/journald-server.c
index 07748f0..3f05328 100644
--- a/src/journal/journald-server.c
+++ b/src/journal/journald-server.c
@@ -162,9 +162,15 @@ static int cache_space_refresh(Server *s, JournalStorage *storage) {
         if (space->timestamp != 0 && usec_add(space->timestamp, RECHECK_SPACE_USEC) > ts)
                 return 0;
 
+// TODO: Managarm does not implement fstatvfs
+#ifndef __managarm__
         r = server_determine_path_usage(s, storage->path, &vfs_used, &vfs_avail);
         if (r < 0)
                 return r;
+#else
+        vfs_used = 0;
+        vfs_avail = 16384;
+#endif
 
         space->vfs_used = vfs_used;
         space->vfs_available = vfs_avail;
@@ -2817,9 +2823,12 @@ int server_init(Server *s, const char *namespace) {
         if (r < 0)
                 return r;
 
+// TODO: Managarm does not implement /proc/sys/kernel/hostname yet
+#ifndef __managarm__
         r = server_open_hostname(s);
         if (r < 0)
                 return r;
+#endif
 
         r = server_setup_signals(s);
         if (r < 0)
diff --git a/src/journal/journald.conf b/src/journal/journald.conf
index 9a12ca7..828dee0 100644
--- a/src/journal/journald.conf
+++ b/src/journal/journald.conf
@@ -35,16 +35,16 @@
 #MaxRetentionSec=0
 #MaxFileSec=1month
 #ForwardToSyslog=no
-#ForwardToKMsg=no
+ForwardToKMsg=yes
 #ForwardToConsole=no
 #ForwardToWall=yes
 #TTYPath=/dev/console
 #MaxLevelStore=debug
 #MaxLevelSyslog=debug
-#MaxLevelKMsg=notice
+MaxLevelKMsg=debug
 #MaxLevelConsole=info
 #MaxLevelWall=emerg
 #MaxLevelSocket=debug
 #LineMax=48K
-#ReadKMsg=yes
+ReadKMsg=no
 #Audit=yes
diff --git a/src/libsystemd/sd-journal/journal-send.c b/src/libsystemd/sd-journal/journal-send.c
index 7d02b57..a085889 100644
--- a/src/libsystemd/sd-journal/journal-send.c
+++ b/src/libsystemd/sd-journal/journal-send.c
@@ -28,6 +28,7 @@
 #include "stdio-util.h"
 #include "string-util.h"
 #include "tmpfile-util.h"
+#include "parse-printf-format.h"
 
 #define SNDBUF_SIZE (8*1024*1024)
 
diff --git a/src/shared/async.c b/src/shared/async.c
index bd043c8..524c550 100644
--- a/src/shared/async.c
+++ b/src/shared/async.c
@@ -86,6 +86,9 @@ static int close_func(void *p) {
 }
 
 int asynchronous_close(int fd) {
+#ifdef __managarm__
+        safe_close(fd); /* local fallback */
+#else
         unsigned v;
         pid_t pid;
         int r;
@@ -129,6 +132,7 @@ int asynchronous_close(int fd) {
                         if (waitpid(pid, NULL, __WCLONE) >= 0 || errno != EINTR)
                                 break;
         }
+#endif
 
         return -EBADF; /* return an invalidated fd */
 }
diff --git a/src/shared/mount-setup.c b/src/shared/mount-setup.c
index d5009fb..741d912 100644
--- a/src/shared/mount-setup.c
+++ b/src/shared/mount-setup.c
@@ -57,6 +57,8 @@ typedef struct MountPoint {
  * SMACK is enabled we need smackfs, too, so it's a fifth one. */
 #if ENABLE_SMACK
 #define N_EARLY_MOUNT 5
+#elif defined __managarm__
+#define N_EARLY_MOUNT 3
 #else
 #define N_EARLY_MOUNT 4
 #endif
@@ -83,8 +85,10 @@ static const MountPoint mount_table[] = {
           NULL,          MNT_FATAL|MNT_IN_CONTAINER },
         { "devtmpfs",    "/dev",                      "devtmpfs",   "mode=0755" TMPFS_LIMITS_DEV,               MS_NOSUID|MS_STRICTATIME,
           NULL,          MNT_FATAL|MNT_IN_CONTAINER },
+#ifndef __managarm__
         { "securityfs",  "/sys/kernel/security",      "securityfs", NULL,                                       MS_NOSUID|MS_NOEXEC|MS_NODEV,
           NULL,          MNT_NONE                   },
+#endif
 #if ENABLE_SMACK
         { "smackfs",     "/sys/fs/smackfs",           "smackfs",    "smackfsdef=*",                             MS_NOSUID|MS_NOEXEC|MS_NODEV,
           mac_smack_use, MNT_FATAL                  },
@@ -101,10 +105,12 @@ static const MountPoint mount_table[] = {
 #endif
         { "tmpfs",       "/run",                      "tmpfs",      "mode=0755" TMPFS_LIMITS_RUN,               MS_NOSUID|MS_NODEV|MS_STRICTATIME,
           NULL,          MNT_FATAL|MNT_IN_CONTAINER },
+#ifndef __managarm__
         { "cgroup2",     "/sys/fs/cgroup",            "cgroup2",    "nsdelegate,memory_recursiveprot",          MS_NOSUID|MS_NOEXEC|MS_NODEV,
           check_recursiveprot_supported, MNT_IN_CONTAINER|MNT_CHECK_WRITABLE },
         { "cgroup2",     "/sys/fs/cgroup",            "cgroup2",    "nsdelegate",                               MS_NOSUID|MS_NOEXEC|MS_NODEV,
           cg_is_unified_wanted, MNT_IN_CONTAINER|MNT_CHECK_WRITABLE },
+#endif
         { "cgroup2",     "/sys/fs/cgroup",            "cgroup2",    NULL,                                       MS_NOSUID|MS_NOEXEC|MS_NODEV,
           cg_is_unified_wanted, MNT_IN_CONTAINER|MNT_CHECK_WRITABLE },
 #if ENABLE_PSTORE
@@ -115,8 +121,10 @@ static const MountPoint mount_table[] = {
         { "efivarfs",    "/sys/firmware/efi/efivars", "efivarfs",   NULL,                                       MS_NOSUID|MS_NOEXEC|MS_NODEV,
           is_efi_boot,   MNT_NONE                   },
 #endif
+#ifndef __managarm__
         { "bpf",         "/sys/fs/bpf",               "bpf",        "mode=0700",                                MS_NOSUID|MS_NOEXEC|MS_NODEV,
           NULL,          MNT_NONE,                  },
+#endif
 };
 
 assert_cc(N_EARLY_MOUNT <= ELEMENTSOF(mount_table));
@@ -437,9 +445,11 @@ int mount_setup(bool loaded_policy, bool leave_propagation) {
          * needed. Note that we set this only when we are invoked directly by the kernel. If we are invoked by a
          * container manager we assume the container manager knows what it is doing (for example, because it set up
          * some directories with different propagation modes). */
+#ifndef __managarm__
         if (detect_container() <= 0 && !leave_propagation)
                 if (mount(NULL, "/", NULL, MS_REC|MS_SHARED, NULL) < 0)
                         log_warning_errno(errno, "Failed to set up the root directory for shared mount propagation: %m");
+#endif
 
         /* Create a few directories we always want around, Note that sd_booted() checks for /run/systemd/system, so
          * this mkdir really needs to stay for good, otherwise software that copied sd-daemon.c into their sources will
diff --git a/src/shared/mount-util.c b/src/shared/mount-util.c
index f932a5e..0d2625d 100644
--- a/src/shared/mount-util.c
+++ b/src/shared/mount-util.c
@@ -152,6 +152,10 @@ int bind_remount_recursive_with_mountinfo(
                 char **deny_list,
                 FILE *proc_self_mountinfo) {
 
+// TODO: Remove once we support bind mounts
+#ifdef __managarm__
+        return -ENOENT;
+#endif
         _cleanup_fclose_ FILE *proc_self_mountinfo_opened = NULL;
         _cleanup_set_free_ Set *done = NULL;
         unsigned n_tries = 0;
@@ -1708,6 +1712,8 @@ int mount_credentials_fs(const char *path, size_t size, bool ro) {
                         return r;
         }
 
+// TODO: Investigate if we need this
+#ifndef __managarm__
         r = mount_nofollow_verbose(
                         LOG_DEBUG,
                         "ramfs",
@@ -1717,6 +1723,7 @@ int mount_credentials_fs(const char *path, size_t size, bool ro) {
                         "mode=0700");
         if (r >= 0)
                 return r;
+#endif
 
         if (asprintf(&opts, "mode=0700,nr_inodes=1024,size=%zu", size) < 0)
                 return -ENOMEM;
diff --git a/src/udev/udev.conf b/src/udev/udev.conf
index 07d7f0c..5914775 100644
--- a/src/udev/udev.conf
+++ b/src/udev/udev.conf
@@ -3,7 +3,7 @@
 # udevd is also started in the initrd.  When this file is modified you might
 # also want to rebuild the initrd, so that it will include the modified configuration.
 
-#udev_log=info
+udev_log=debug
 #children_max=
 #exec_delay=
 #event_timeout=180
diff --git a/units/systemd-journald.service.in b/units/systemd-journald.service.in
index 4404af9..c27be83 100644
--- a/units/systemd-journald.service.in
+++ b/units/systemd-journald.service.in
@@ -31,15 +31,15 @@ IgnoreOnIsolate=yes
 [Service]
 DeviceAllow=char-* rw
 ExecStart={{LIBEXECDIR}}/systemd-journald
-FileDescriptorStoreMax=4224
+FileDescriptorStoreMax=256
 # Ensure services using StandardOutput=journal do not break when journald is stopped
 FileDescriptorStorePreserve=yes
 ImportCredential=journal.*
-IPAddressDeny=any
+#IPAddressDeny=any
 LockPersonality=yes
 MemoryDenyWriteExecute=yes
 NoNewPrivileges=yes
-OOMScoreAdjust=-250
+#OOMScoreAdjust=-250
 ProtectClock=yes
 Restart=always
 RestartSec=0
@@ -64,8 +64,8 @@ PassEnvironment=TERM
 # In case you're wondering why CAP_SYS_PTRACE is needed, access to
 # /proc/<pid>/exe requires this capability. Thus if this capability is missing
 # the _EXE=/OBJECT_EXE= fields will be missing from the journal entries.
-CapabilityBoundingSet=CAP_SYS_ADMIN CAP_DAC_OVERRIDE CAP_SYS_PTRACE CAP_SYSLOG CAP_AUDIT_CONTROL CAP_AUDIT_READ CAP_CHOWN CAP_DAC_READ_SEARCH CAP_FOWNER CAP_SETUID CAP_SETGID CAP_MAC_OVERRIDE
+#CapabilityBoundingSet=CAP_SYS_ADMIN CAP_DAC_OVERRIDE CAP_SYS_PTRACE CAP_SYSLOG CAP_AUDIT_CONTROL CAP_AUDIT_READ CAP_CHOWN CAP_DAC_READ_SEARCH CAP_FOWNER CAP_SETUID CAP_SETGID CAP_MAC_OVERRIDE
 
 # If there are many split up journal files we need a lot of fds to access them
 # all in parallel.
-LimitNOFILE={{HIGH_RLIMIT_NOFILE}}
+#LimitNOFILE={{HIGH_RLIMIT_NOFILE}}
diff --git a/units/systemd-udevd.service.in b/units/systemd-udevd.service.in
index f4a4482..29a22b5 100644
--- a/units/systemd-udevd.service.in
+++ b/units/systemd-udevd.service.in
@@ -22,23 +22,23 @@ Delegate=pids
 DelegateSubgroup=udev
 Type=notify-reload
 # Note that udev will reset the value internally for its workers
-OOMScoreAdjust=-1000
+#OOMScoreAdjust=-1000
 Sockets=systemd-udevd-control.socket systemd-udevd-kernel.socket
 Restart=always
 RestartSec=0
 ExecStart={{LIBEXECDIR}}/systemd-udevd
 KillMode=mixed
 TasksMax=infinity
-PrivateMounts=yes
-ProtectHostname=yes
-MemoryDenyWriteExecute=yes
-RestrictAddressFamilies=AF_UNIX AF_NETLINK AF_INET AF_INET6
-RestrictRealtime=yes
-RestrictSUIDSGID=yes
-SystemCallFilter=@system-service @module @raw-io bpf
-SystemCallFilter=~@clock
-SystemCallErrorNumber=EPERM
-SystemCallArchitectures=native
-LockPersonality=yes
-IPAddressDeny=any
+#PrivateMounts=yes
+#ProtectHostname=yes
+#MemoryDenyWriteExecute=yes
+#RestrictAddressFamilies=AF_UNIX AF_NETLINK AF_INET AF_INET6
+#RestrictRealtime=yes
+#RestrictSUIDSGID=yes
+#SystemCallFilter=@system-service @module @raw-io bpf
+#SystemCallFilter=~@clock
+#SystemCallErrorNumber=EPERM
+#SystemCallArchitectures=native
+#LockPersonality=yes
+#IPAddressDeny=any
 {{SERVICE_WATCHDOG}}
-- 
2.50.1

