From 2182aff346c122d23017bf85f780eced2fa1a61d Mon Sep 17 00:00:00 2001
From: Dennis Bonke <admin@dennisbonke.com>
Date: Fri, 4 Apr 2025 15:29:44 +0200
Subject: [PATCH] Add Managarm support

---
 src/errno.rs              | 152 +++++++++++++++++++++---------------
 src/features.rs           |   2 +-
 src/ifaddrs.rs            |   2 +-
 src/lib.rs                |   7 +-
 src/poll.rs               |   2 +-
 src/sys/memfd.rs          |   1 +
 src/sys/mod.rs            |  17 ++--
 src/sys/resource.rs       |  20 +++--
 src/sys/signal.rs         |  34 +++++---
 src/sys/socket/addr.rs    |  65 +++++++++-------
 src/sys/socket/mod.rs     | 139 +++++++++++++++++----------------
 src/sys/socket/sockopt.rs |  18 +++--
 src/sys/termios.rs        |  75 ++++++++++++------
 src/sys/time.rs           |   7 +-
 src/time.rs               |  25 +++---
 src/unistd.rs             | 158 ++++++++++++++++++++++++--------------
 16 files changed, 431 insertions(+), 293 deletions(-)

diff --git a/src/errno.rs b/src/errno.rs
index 2e74a84..05b3bd6 100644
--- a/src/errno.rs
+++ b/src/errno.rs
@@ -32,6 +32,7 @@ cfg_if! {
                         target_os = "redox",
                         target_os = "dragonfly",
                         target_os = "fuchsia",
+                        target_os = "managarm",
                         target_os = "hurd"))] {
         unsafe fn errno_location() -> *mut c_int {
             unsafe { libc::__errno_location() }
@@ -277,7 +278,8 @@ fn desc(errno: Errno) -> &'static str {
             linux_android,
             solarish,
             target_os = "aix",
-            target_os = "fuchsia"
+            target_os = "fuchsia",
+            target_os = "managarm"
         ))]
         ECHRNG => "Channel number out of range",
 
@@ -285,7 +287,8 @@ fn desc(errno: Errno) -> &'static str {
             linux_android,
             solarish,
             target_os = "aix",
-            target_os = "fuchsia"
+            target_os = "fuchsia",
+            target_os = "managarm"
         ))]
         EL2NSYNC => "Level 2 not synchronized",
 
@@ -293,7 +296,8 @@ fn desc(errno: Errno) -> &'static str {
             linux_android,
             solarish,
             target_os = "aix",
-            target_os = "fuchsia"
+            target_os = "fuchsia",
+            target_os = "managarm"
         ))]
         EL3HLT => "Level 3 halted",
 
@@ -301,7 +305,8 @@ fn desc(errno: Errno) -> &'static str {
             linux_android,
             solarish,
             target_os = "aix",
-            target_os = "fuchsia"
+            target_os = "fuchsia",
+            target_os = "managarm"
         ))]
         EL3RST => "Level 3 reset",
 
@@ -309,7 +314,8 @@ fn desc(errno: Errno) -> &'static str {
             linux_android,
             solarish,
             target_os = "aix",
-            target_os = "fuchsia"
+            target_os = "fuchsia",
+            target_os = "managarm"
         ))]
         ELNRNG => "Link number out of range",
 
@@ -317,7 +323,8 @@ fn desc(errno: Errno) -> &'static str {
             linux_android,
             solarish,
             target_os = "aix",
-            target_os = "fuchsia"
+            target_os = "fuchsia",
+            target_os = "managarm"
         ))]
         EUNATCH => "Protocol driver not attached",
 
@@ -325,7 +332,8 @@ fn desc(errno: Errno) -> &'static str {
             linux_android,
             solarish,
             target_os = "aix",
-            target_os = "fuchsia"
+            target_os = "fuchsia",
+            target_os = "managarm"
         ))]
         ENOCSI => "No CSI structure available",
 
@@ -333,36 +341,38 @@ fn desc(errno: Errno) -> &'static str {
             linux_android,
             solarish,
             target_os = "aix",
-            target_os = "fuchsia"
+            target_os = "fuchsia",
+            target_os = "managarm"
         ))]
         EL2HLT => "Level 2 halted",
 
-        #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, solarish, target_os = "fuchsia", target_os = "managarm"))]
         EBADE => "Invalid exchange",
 
-        #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, solarish, target_os = "fuchsia", target_os = "managarm"))]
         EBADR => "Invalid request descriptor",
 
-        #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, solarish, target_os = "fuchsia", target_os = "managarm"))]
         EXFULL => "Exchange full",
 
-        #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, solarish, target_os = "fuchsia", target_os = "managarm"))]
         ENOANO => "No anode",
 
-        #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, solarish, target_os = "fuchsia", target_os = "managarm"))]
         EBADRQC => "Invalid request code",
 
-        #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, solarish, target_os = "fuchsia", target_os = "managarm"))]
         EBADSLT => "Invalid slot",
 
-        #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, solarish, target_os = "fuchsia", target_os = "managarm"))]
         EBFONT => "Bad font file format",
 
         #[cfg(any(
             linux_android,
             solarish,
             target_os = "fuchsia",
-            target_os = "hurd"
+            target_os = "hurd",
+            target_os = "managarm"
         ))]
         ENOSTR => "Device not a stream",
 
@@ -370,7 +380,8 @@ fn desc(errno: Errno) -> &'static str {
             linux_android,
             solarish,
             target_os = "fuchsia",
-            target_os = "hurd"
+            target_os = "hurd",
+            target_os = "managarm"
         ))]
         ENODATA => "No data available",
 
@@ -378,7 +389,8 @@ fn desc(errno: Errno) -> &'static str {
             linux_android,
             solarish,
             target_os = "fuchsia",
-            target_os = "hurd"
+            target_os = "hurd",
+            target_os = "managarm"
         ))]
         ETIME => "Timer expired",
 
@@ -386,21 +398,23 @@ fn desc(errno: Errno) -> &'static str {
             linux_android,
             solarish,
             target_os = "fuchsia",
-            target_os = "hurd"
+            target_os = "hurd",
+            target_os = "managarm"
         ))]
         ENOSR => "Out of streams resources",
 
-        #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, solarish, target_os = "fuchsia", target_os = "managarm"))]
         ENONET => "Machine is not on the network",
 
-        #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, solarish, target_os = "fuchsia", target_os = "managarm"))]
         ENOPKG => "Package not installed",
 
         #[cfg(any(
             linux_android,
             solarish,
             target_os = "fuchsia",
-            target_os = "hurd"
+            target_os = "hurd",
+            target_os = "managarm"
         ))]
         EREMOTE => "Object is remote",
 
@@ -408,17 +422,18 @@ fn desc(errno: Errno) -> &'static str {
             linux_android,
             solarish,
             target_os = "aix",
-            target_os = "fuchsia"
+            target_os = "fuchsia",
+            target_os = "managarm"
         ))]
         ENOLINK => "Link has been severed",
 
-        #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, solarish, target_os = "fuchsia", target_os = "managarm"))]
         EADV => "Advertise error",
 
-        #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, solarish, target_os = "fuchsia", target_os = "managarm"))]
         ESRMNT => "Srmount error",
 
-        #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, solarish, target_os = "fuchsia", target_os = "managarm"))]
         ECOMM => "Communication error on send",
 
         #[cfg(any(
@@ -426,6 +441,7 @@ fn desc(errno: Errno) -> &'static str {
             solarish,
             target_os = "aix",
             target_os = "fuchsia",
+            target_os = "managarm"
         ))]
         EPROTO => "Protocol error",
 
@@ -433,14 +449,15 @@ fn desc(errno: Errno) -> &'static str {
             linux_android,
             solarish,
             target_os = "aix",
-            target_os = "fuchsia"
+            target_os = "fuchsia",
+            target_os = "managarm"
         ))]
         EMULTIHOP => "Multihop attempted",
 
-        #[cfg(any(linux_android, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, target_os = "fuchsia", target_os = "managarm"))]
         EDOTDOT => "RFS specific error",
 
-        #[cfg(any(linux_android, target_os = "aix", target_os = "fuchsia"))]
+        #[cfg(any(linux_android, target_os = "aix", target_os = "fuchsia", target_os = "managarm"))]
         EBADMSG => "Not a data message",
 
         #[cfg(solarish)]
@@ -451,36 +468,38 @@ fn desc(errno: Errno) -> &'static str {
             target_os = "aix",
             target_os = "fuchsia",
             target_os = "haiku",
-            target_os = "hurd"
+            target_os = "hurd",
+            target_os = "managarm"
         ))]
         EOVERFLOW => "Value too large for defined data type",
 
-        #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, solarish, target_os = "fuchsia", target_os = "managarm"))]
         ENOTUNIQ => "Name not unique on network",
 
-        #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, solarish, target_os = "fuchsia", target_os = "managarm"))]
         EBADFD => "File descriptor in bad state",
 
-        #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, solarish, target_os = "fuchsia", target_os = "managarm"))]
         EREMCHG => "Remote address changed",
 
-        #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, solarish, target_os = "fuchsia", target_os = "managarm"))]
         ELIBACC => "Can not access a needed shared library",
 
-        #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, solarish, target_os = "fuchsia", target_os = "managarm"))]
         ELIBBAD => "Accessing a corrupted shared library",
 
-        #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, solarish, target_os = "fuchsia", target_os = "managarm"))]
         ELIBSCN => ".lib section in a.out corrupted",
 
-        #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, solarish, target_os = "fuchsia", target_os = "managarm"))]
         ELIBMAX => "Attempting to link in too many shared libraries",
 
         #[cfg(any(
             linux_android,
             solarish,
             target_os = "fuchsia",
-            target_os = "hurd"
+            target_os = "hurd",
+            target_os = "managarm"
         ))]
         ELIBEXEC => "Cannot exec a shared library directly",
 
@@ -489,7 +508,8 @@ fn desc(errno: Errno) -> &'static str {
             solarish,
             target_os = "aix",
             target_os = "fuchsia",
-            target_os = "openbsd"
+            target_os = "openbsd",
+            target_os = "managarm"
         ))]
         EILSEQ => "Illegal byte sequence",
 
@@ -497,57 +517,61 @@ fn desc(errno: Errno) -> &'static str {
             linux_android,
             solarish,
             target_os = "aix",
-            target_os = "fuchsia"
+            target_os = "fuchsia",
+            target_os = "managarm"
         ))]
         ERESTART => "Interrupted system call should be restarted",
 
-        #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, solarish, target_os = "fuchsia", target_os = "managarm"))]
         ESTRPIPE => "Streams pipe error",
 
-        #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, solarish, target_os = "fuchsia", target_os = "managarm"))]
         EUSERS => "Too many users",
 
         #[cfg(any(
             linux_android,
             target_os = "fuchsia",
             target_os = "netbsd",
-            target_os = "redox"
+            target_os = "redox",
+            target_os = "managarm"
         ))]
         EOPNOTSUPP => "Operation not supported on transport endpoint",
 
-        #[cfg(any(linux_android, target_os = "fuchsia", target_os = "hurd"))]
+        #[cfg(any(linux_android, target_os = "fuchsia", target_os = "hurd", target_os = "managarm"))]
         ESTALE => "Stale file handle",
 
-        #[cfg(any(linux_android, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, target_os = "fuchsia", target_os = "managarm"))]
         EUCLEAN => "Structure needs cleaning",
 
-        #[cfg(any(linux_android, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, target_os = "fuchsia", target_os = "managarm"))]
         ENOTNAM => "Not a XENIX named type file",
 
-        #[cfg(any(linux_android, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, target_os = "fuchsia", target_os = "managarm"))]
         ENAVAIL => "No XENIX semaphores available",
 
-        #[cfg(any(linux_android, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, target_os = "fuchsia", target_os = "managarm"))]
         EISNAM => "Is a named type file",
 
-        #[cfg(any(linux_android, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, target_os = "fuchsia", target_os = "managarm"))]
         EREMOTEIO => "Remote I/O error",
 
-        #[cfg(any(linux_android, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, target_os = "fuchsia", target_os = "managarm"))]
         EDQUOT => "Quota exceeded",
 
         #[cfg(any(
             linux_android,
             target_os = "fuchsia",
             target_os = "openbsd",
-            target_os = "dragonfly"
+            target_os = "dragonfly",
+            target_os = "managarm"
         ))]
         ENOMEDIUM => "No medium found",
 
         #[cfg(any(
             linux_android,
             target_os = "fuchsia",
-            target_os = "openbsd"
+            target_os = "openbsd",
+            target_os = "managarm"
         ))]
         EMEDIUMTYPE => "Wrong medium type",
 
@@ -555,34 +579,36 @@ fn desc(errno: Errno) -> &'static str {
             linux_android,
             solarish,
             target_os = "fuchsia",
-            target_os = "haiku"
+            target_os = "haiku",
+            target_os = "managarm"
         ))]
         ECANCELED => "Operation canceled",
 
-        #[cfg(any(linux_android, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, target_os = "fuchsia", target_os = "managarm"))]
         ENOKEY => "Required key not available",
 
-        #[cfg(any(linux_android, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, target_os = "fuchsia", target_os = "managarm"))]
         EKEYEXPIRED => "Key has expired",
 
-        #[cfg(any(linux_android, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, target_os = "fuchsia", target_os = "managarm"))]
         EKEYREVOKED => "Key has been revoked",
 
-        #[cfg(any(linux_android, target_os = "fuchsia"))]
+        #[cfg(any(linux_android, target_os = "fuchsia", target_os = "managarm"))]
         EKEYREJECTED => "Key was rejected by service",
 
         #[cfg(any(
             linux_android,
             target_os = "aix",
             target_os = "fuchsia",
-            target_os = "hurd"
+            target_os = "hurd",
+            target_os = "managarm"
         ))]
         EOWNERDEAD => "Owner died",
 
         #[cfg(solarish)]
         EOWNERDEAD => "Process died with lock",
 
-        #[cfg(any(linux_android, target_os = "aix", target_os = "fuchsia"))]
+        #[cfg(any(linux_android, target_os = "aix", target_os = "fuchsia", target_os = "managarm"))]
         ENOTRECOVERABLE => "State not recoverable",
 
         #[cfg(solarish)]
@@ -590,13 +616,15 @@ fn desc(errno: Errno) -> &'static str {
 
         #[cfg(any(
             all(target_os = "linux", not(target_arch = "mips")),
-            target_os = "fuchsia"
+            target_os = "fuchsia",
+            target_os = "managarm"
         ))]
         ERFKILL => "Operation not possible due to RF-kill",
 
         #[cfg(any(
             all(target_os = "linux", not(target_arch = "mips")),
-            target_os = "fuchsia"
+            target_os = "fuchsia",
+            target_os = "managarm"
         ))]
         EHWPOISON => "Memory page has hardware error",
 
@@ -832,7 +860,7 @@ fn desc(errno: Errno) -> &'static str {
     }
 }
 
-#[cfg(any(linux_android, target_os = "fuchsia"))]
+#[cfg(any(linux_android, target_os = "fuchsia", target_os = "managarm"))]
 mod consts {
     #[derive(Clone, Copy, Debug, Eq, PartialEq)]
     #[repr(i32)]
diff --git a/src/features.rs b/src/features.rs
index 0a0c618..d2c3ff3 100644
--- a/src/features.rs
+++ b/src/features.rs
@@ -1,7 +1,7 @@
 //! Feature tests for OS functionality
 pub use self::os::*;
 
-#[cfg(linux_android)]
+#[cfg(any(linux_android, target_os = "managarm"))]
 mod os {
     use crate::sys::utsname::uname;
     use crate::Result;
diff --git a/src/ifaddrs.rs b/src/ifaddrs.rs
index b3de64b..849007c 100644
--- a/src/ifaddrs.rs
+++ b/src/ifaddrs.rs
@@ -33,7 +33,7 @@ pub struct InterfaceAddress {
 }
 
 cfg_if! {
-    if #[cfg(any(linux_android, target_os = "emscripten", target_os = "fuchsia"))] {
+    if #[cfg(any(linux_android, target_os = "emscripten", target_os = "fuchsia", target_os = "managarm"))] {
         fn get_ifu_from_sockaddr(info: &libc::ifaddrs) -> *const libc::sockaddr {
             info.ifa_ifu
         }
diff --git a/src/lib.rs b/src/lib.rs
index c4c0fa5..5a4179c 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -101,11 +101,12 @@ pub use libc;
 mod macros;
 
 // Public crates
-#[cfg(not(target_os = "redox"))]
+#[cfg(not(any(target_os = "redox", target_os = "managarm")))]
 feature! {
     #![feature = "dir"]
     pub mod dir;
 }
+#[cfg(not(target_os = "managarm"))]
 feature! {
     #![feature = "env"]
     pub mod env;
@@ -124,7 +125,8 @@ feature! {
 
     #[cfg(any(linux_android,
               bsd,
-              solarish))]
+              solarish,
+              target_os = "managarm"))]
     #[deny(missing_docs)]
     pub mod ifaddrs;
     #[cfg(not(target_os = "redox"))]
@@ -155,6 +157,7 @@ feature! {
     #[deny(missing_docs)]
     pub mod pty;
 }
+#[cfg(not(target_os = "managarm"))]
 feature! {
     #![feature = "sched"]
     pub mod sched;
diff --git a/src/poll.rs b/src/poll.rs
index 0ad9f40..3f7c7fb 100644
--- a/src/poll.rs
+++ b/src/poll.rs
@@ -224,7 +224,7 @@ feature! {
 /// so in that case `ppoll` differs from `poll` only in the precision of the
 /// timeout argument.
 ///
-#[cfg(any(linux_android, freebsdlike))]
+#[cfg(any(linux_android, freebsdlike, target_os = "managarm"))]
 pub fn ppoll(
     fds: &mut [PollFd],
     timeout: Option<crate::sys::time::TimeSpec>,
diff --git a/src/sys/memfd.rs b/src/sys/memfd.rs
index 22ee5fc..a517729 100644
--- a/src/sys/memfd.rs
+++ b/src/sys/memfd.rs
@@ -92,6 +92,7 @@ pub fn memfd_create(name: &CStr, flags: MemFdCreateFlag) -> Result<OwnedFd> {
                 not(target_os = "android"),
                 any(
                     target_os = "freebsd",
+                    target_os = "managarm",
                     // If the OS is Linux, gnu and musl expose a memfd_create symbol but not uclibc
                     target_env = "gnu",
                     target_env = "musl",
diff --git a/src/sys/mod.rs b/src/sys/mod.rs
index 93339d1..50ccb5b 100644
--- a/src/sys/mod.rs
+++ b/src/sys/mod.rs
@@ -13,14 +13,14 @@ feature! {
 feature! {
     #![feature = "event"]
 
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     #[allow(missing_docs)]
     pub mod epoll;
 
     #[cfg(bsd)]
     pub mod event;
 
-    #[cfg(any(linux_android, target_os = "freebsd"))]
+    #[cfg(any(linux_android, target_os = "freebsd", target_os = "managarm"))]
     #[allow(missing_docs)]
     pub mod eventfd;
 }
@@ -31,13 +31,13 @@ feature! {
     pub mod fanotify;
 }
 
-#[cfg(any(bsd, linux_android, target_os = "redox", solarish))]
+#[cfg(any(bsd, linux_android, target_os = "redox", solarish, target_os = "managarm"))]
 #[cfg(feature = "ioctl")]
 #[cfg_attr(docsrs, doc(cfg(feature = "ioctl")))]
 #[macro_use]
 pub mod ioctl;
 
-#[cfg(any(linux_android, target_os = "freebsd"))]
+#[cfg(any(linux_android, target_os = "freebsd", target_os = "managarm"))]
 feature! {
     #![feature = "fs"]
     pub mod memfd;
@@ -109,7 +109,7 @@ feature! {
 
 pub mod signal;
 
-#[cfg(linux_android)]
+#[cfg(any(linux_android, target_os = "managarm"))]
 feature! {
     #![feature = "signal"]
     #[allow(missing_docs)]
@@ -167,13 +167,13 @@ feature! {
     pub mod wait;
 }
 
-#[cfg(linux_android)]
+#[cfg(any(linux_android, target_os = "managarm"))]
 feature! {
     #![feature = "inotify"]
     pub mod inotify;
 }
 
-#[cfg(linux_android)]
+#[cfg(any(linux_android, target_os = "managarm"))]
 feature! {
     #![feature = "time"]
     pub mod timerfd;
@@ -184,7 +184,8 @@ feature! {
         target_os = "freebsd",
         solarish,
         target_os = "linux",
-        target_os = "netbsd"
+        target_os = "netbsd",
+        target_os = "managarm"
     ),
     feature = "time",
     feature = "signal"
diff --git a/src/sys/resource.rs b/src/sys/resource.rs
index 73d8a05..d07d17d 100644
--- a/src/sys/resource.rs
+++ b/src/sys/resource.rs
@@ -19,6 +19,7 @@ cfg_if! {
         bsd,
         target_os = "android",
         target_os = "aix",
+        target_os = "managarm",
         all(target_os = "linux", not(target_env = "gnu"))
     ))]{
         use libc::rlimit;
@@ -43,12 +44,13 @@ libc_enum! {
     // https://github.com/rust-lang/libc/blob/master/src/unix/linux_like/linux/gnu/mod.rs
     #[cfg_attr(any(
             all(target_os = "linux", any(target_env = "gnu", target_env = "uclibc")),
-            target_os = "hurd"
+            target_os = "hurd",
         ), repr(u32))]
     #[cfg_attr(any(
             bsd,
             target_os = "android",
             target_os = "aix",
+            target_os = "managarm",
             all(target_os = "linux", not(any(target_env = "gnu", target_env = "uclibc")))
         ), repr(i32))]
     #[non_exhaustive]
@@ -75,22 +77,22 @@ libc_enum! {
         /// The maximum number of kqueues this user id is allowed to create.
         RLIMIT_KQUEUES,
 
-        #[cfg(linux_android)]
+        #[cfg(any(linux_android, target_os = "managarm"))]
         /// A limit on the combined number of flock locks and fcntl leases that
         /// this process may establish.
         RLIMIT_LOCKS,
 
-        #[cfg(any(linux_android, target_os = "freebsd", netbsdlike))]
+        #[cfg(any(linux_android, target_os = "freebsd", netbsdlike, target_os = "managarm"))]
         /// The maximum size (in bytes) which a process may lock into memory
         /// using the mlock(2) system call.
         RLIMIT_MEMLOCK,
 
-        #[cfg(linux_android)]
+        #[cfg(any(linux_android, target_os = "managarm"))]
         /// A limit on the number of bytes that can be allocated for POSIX
         /// message queues  for  the  real  user  ID  of  the  calling process.
         RLIMIT_MSGQUEUE,
 
-        #[cfg(linux_android)]
+        #[cfg(any(linux_android, target_os = "managarm"))]
         /// A ceiling to which the process's nice value can be raised using
         /// setpriority or nice.
         RLIMIT_NICE,
@@ -100,6 +102,7 @@ libc_enum! {
             target_os = "freebsd",
             netbsdlike,
             target_os = "aix",
+            target_os = "managarm"
         ))]
         /// The maximum number of simultaneous processes for this user id.
         RLIMIT_NPROC,
@@ -113,23 +116,24 @@ libc_enum! {
             target_os = "freebsd",
             netbsdlike,
             target_os = "aix",
+            target_os = "managarm"
         ))]
         /// When there is memory pressure and swap is available, prioritize
         /// eviction of a process' resident pages beyond this amount (in bytes).
         RLIMIT_RSS,
 
-        #[cfg(linux_android)]
+        #[cfg(any(linux_android, target_os = "managarm"))]
         /// A ceiling on the real-time priority that may be set for this process
         /// using sched_setscheduler and  sched_set‐ param.
         RLIMIT_RTPRIO,
 
-        #[cfg(any(target_os = "linux"))]
+        #[cfg(any(target_os = "linux", target_os = "managarm"))]
         /// A limit (in microseconds) on the amount of CPU time that a process
         /// scheduled under a real-time scheduling policy may con‐ sume without
         /// making a blocking system call.
         RLIMIT_RTTIME,
 
-        #[cfg(linux_android)]
+        #[cfg(any(linux_android, target_os = "managarm"))]
         /// A limit on the number of signals that may be queued for the real
         /// user ID of the  calling  process.
         RLIMIT_SIGPENDING,
diff --git a/src/sys/signal.rs b/src/sys/signal.rs
index 921fb28..cfd5978 100644
--- a/src/sys/signal.rs
+++ b/src/sys/signal.rs
@@ -67,7 +67,7 @@ libc_enum! {
         SIGTERM,
         /// Stack fault (obsolete)
         #[cfg(all(any(linux_android, target_os = "emscripten",
-                      target_os = "fuchsia"),
+                      target_os = "fuchsia", target_os = "managarm"),
                   not(any(target_arch = "mips",
                           target_arch = "mips32r6",
                           target_arch = "mips64",
@@ -102,19 +102,19 @@ libc_enum! {
         #[cfg(not(target_os = "haiku"))]
         SIGIO,
         #[cfg(any(linux_android, target_os = "emscripten",
-                  target_os = "fuchsia", target_os = "aix"))]
+                  target_os = "fuchsia", target_os = "aix", target_os = "managarm"))]
         /// Power failure imminent.
         SIGPWR,
         /// Bad system call
         SIGSYS,
         #[cfg(not(any(linux_android, target_os = "emscripten",
                       target_os = "fuchsia",
-                      target_os = "redox", target_os = "haiku")))]
+                      target_os = "redox", target_os = "haiku", target_os = "managarm")))]
         /// Emulator trap
         SIGEMT,
         #[cfg(not(any(linux_android, target_os = "emscripten",
                       target_os = "fuchsia", target_os = "redox",
-                      target_os = "haiku", target_os = "aix")))]
+                      target_os = "haiku", target_os = "aix", target_os = "managarm")))]
         /// Information request
         SIGINFO,
     }
@@ -146,6 +146,7 @@ impl FromStr for Signal {
                     linux_android,
                     target_os = "emscripten",
                     target_os = "fuchsia",
+                    target_os = "managarm"
                 ),
                 not(any(
                     target_arch = "mips",
@@ -174,6 +175,7 @@ impl FromStr for Signal {
                 linux_android,
                 target_os = "emscripten",
                 target_os = "fuchsia",
+                target_os = "managarm"
             ))]
             "SIGPWR" => Signal::SIGPWR,
             "SIGSYS" => Signal::SIGSYS,
@@ -182,7 +184,8 @@ impl FromStr for Signal {
                 target_os = "emscripten",
                 target_os = "fuchsia",
                 target_os = "redox",
-                target_os = "haiku"
+                target_os = "haiku",
+                target_os = "managarm"
             )))]
             "SIGEMT" => Signal::SIGEMT,
             #[cfg(not(any(
@@ -191,7 +194,8 @@ impl FromStr for Signal {
                 target_os = "fuchsia",
                 target_os = "redox",
                 target_os = "aix",
-                target_os = "haiku"
+                target_os = "haiku",
+                target_os = "managarm"
             )))]
             "SIGINFO" => Signal::SIGINFO,
             _ => return Err(Errno::EINVAL),
@@ -228,6 +232,7 @@ impl Signal {
                     linux_android,
                     target_os = "emscripten",
                     target_os = "fuchsia",
+                    target_os = "managarm"
                 ),
                 not(any(
                     target_arch = "mips",
@@ -257,6 +262,7 @@ impl Signal {
                 target_os = "emscripten",
                 target_os = "fuchsia",
                 target_os = "aix",
+                target_os = "managarm"
             ))]
             Signal::SIGPWR => "SIGPWR",
             Signal::SIGSYS => "SIGSYS",
@@ -265,7 +271,8 @@ impl Signal {
                 target_os = "emscripten",
                 target_os = "fuchsia",
                 target_os = "redox",
-                target_os = "haiku"
+                target_os = "haiku",
+                target_os = "managarm"
             )))]
             Signal::SIGEMT => "SIGEMT",
             #[cfg(not(any(
@@ -274,7 +281,8 @@ impl Signal {
                 target_os = "fuchsia",
                 target_os = "redox",
                 target_os = "aix",
-                target_os = "haiku"
+                target_os = "haiku",
+                target_os = "managarm"
             )))]
             Signal::SIGINFO => "SIGINFO",
         }
@@ -315,7 +323,7 @@ const SIGNALS: [Signal; 28] = [
     SIGPROF, SIGWINCH, SIGSYS,
 ];
 #[cfg(all(
-    any(linux_android, target_os = "emscripten", target_os = "fuchsia"),
+    any(linux_android, target_os = "emscripten", target_os = "fuchsia", target_os = "managarm"),
     not(any(
         target_arch = "mips",
         target_arch = "mips32r6",
@@ -332,7 +340,7 @@ const SIGNALS: [Signal; 31] = [
     SIGVTALRM, SIGPROF, SIGWINCH, SIGIO, SIGPWR, SIGSYS,
 ];
 #[cfg(all(
-    any(linux_android, target_os = "emscripten", target_os = "fuchsia"),
+    any(linux_android, target_os = "emscripten", target_os = "fuchsia", target_os = "managarm"),
     any(
         target_arch = "mips",
         target_arch = "mips32r6",
@@ -362,7 +370,8 @@ const SIGNALS: [Signal; 30] = [
     target_os = "emscripten",
     target_os = "aix",
     target_os = "redox",
-    target_os = "haiku"
+    target_os = "haiku",
+    target_os = "managarm"
 )))]
 #[cfg(feature = "signal")]
 const SIGNALS: [Signal; 31] = [
@@ -597,7 +606,8 @@ impl SigSet {
         target_os = "haiku",
         target_os = "hurd",
         target_os = "aix",
-        target_os = "fuchsia"
+        target_os = "fuchsia",
+        target_os = "managarm"
     ))]
     #[doc(alias("sigsuspend"))]
     pub fn suspend(&self) -> Result<()> {
diff --git a/src/sys/socket/addr.rs b/src/sys/socket/addr.rs
index aa89ba9..a314fc7 100644
--- a/src/sys/socket/addr.rs
+++ b/src/sys/socket/addr.rs
@@ -5,6 +5,7 @@
     target_os = "haiku",
     target_os = "fuchsia",
     target_os = "aix",
+    target_os = "managarm"
 ))]
 #[cfg(feature = "net")]
 pub use self::datalink::LinkAddr;
@@ -14,7 +15,7 @@ use super::sa_family_t;
 use crate::errno::Errno;
 #[cfg(linux_android)]
 use crate::sys::socket::addr::alg::AlgAddr;
-#[cfg(linux_android)]
+#[cfg(any(linux_android, target_os = "managarm"))]
 use crate::sys::socket::addr::netlink::NetlinkAddr;
 #[cfg(all(feature = "ioctl", apple_targets))]
 use crate::sys::socket::addr::sys_control::SysControlAddr;
@@ -63,13 +64,13 @@ pub enum AddressFamily {
     /// IPv6 Internet protocols (see [`ipv6(7)`](https://man7.org/linux/man-pages/man7/ipv6.7.html))
     Inet6 = libc::AF_INET6,
     /// Kernel user interface device (see [`netlink(7)`](https://man7.org/linux/man-pages/man7/netlink.7.html))
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     Netlink = libc::AF_NETLINK,
     /// Kernel interface for interacting with the routing table
-    #[cfg(not(any(linux_android, target_os = "redox")))]
+    #[cfg(not(any(linux_android, target_os = "redox", target_os = "managarm")))]
     Route = libc::PF_ROUTE,
     /// Low level packet interface (see [`packet(7)`](https://man7.org/linux/man-pages/man7/packet.7.html))
-    #[cfg(any(linux_android, solarish, target_os = "fuchsia"))]
+    #[cfg(any(linux_android, solarish, target_os = "fuchsia", target_os = "managarm"))]
     Packet = libc::AF_PACKET,
     /// KEXT Controls and Notifications
     #[cfg(apple_targets)]
@@ -105,7 +106,7 @@ pub enum AddressFamily {
     #[cfg(linux_android)]
     Rose = libc::AF_ROSE,
     /// DECet protocol sockets.
-    #[cfg(not(any(target_os = "haiku", target_os = "redox")))]
+    #[cfg(not(any(target_os = "haiku", target_os = "redox", target_os = "managarm")))]
     Decnet = libc::AF_DECnet,
     /// Reserved for "802.2LLC project"; never used.
     #[cfg(linux_android)]
@@ -130,7 +131,7 @@ pub enum AddressFamily {
     #[cfg(linux_android)]
     Rds = libc::AF_RDS,
     /// IBM SNA
-    #[cfg(not(any(target_os = "haiku", target_os = "redox")))]
+    #[cfg(not(any(target_os = "haiku", target_os = "redox", target_os = "managarm")))]
     Sna = libc::AF_SNA,
     /// Socket interface over IrDA
     #[cfg(linux_android)]
@@ -164,6 +165,7 @@ pub enum AddressFamily {
         apple_targets,
         target_os = "hurd",
         target_os = "redox",
+        target_os = "managarm"
     )))]
     Bluetooth = libc::AF_BLUETOOTH,
     /// IUCV (inter-user communication vehicle) z/VM protocol for
@@ -180,6 +182,7 @@ pub enum AddressFamily {
         target_os = "haiku",
         target_os = "hurd",
         target_os = "redox",
+        target_os = "managarm"
     )))]
     Isdn = libc::AF_ISDN,
     /// Nokia cellular modem IPC/RPC interface
@@ -259,11 +262,11 @@ impl AddressFamily {
             libc::AF_UNIX => Some(AddressFamily::Unix),
             libc::AF_INET => Some(AddressFamily::Inet),
             libc::AF_INET6 => Some(AddressFamily::Inet6),
-            #[cfg(linux_android)]
+            #[cfg(any(linux_android, target_os = "managarm"))]
             libc::AF_NETLINK => Some(AddressFamily::Netlink),
             #[cfg(apple_targets)]
             libc::AF_SYSTEM => Some(AddressFamily::System),
-            #[cfg(not(any(linux_android, target_os = "redox")))]
+            #[cfg(not(any(linux_android, target_os = "redox", target_os = "managarm")))]
             libc::PF_ROUTE => Some(AddressFamily::Route),
             #[cfg(linux_android)]
             libc::AF_PACKET => Some(AddressFamily::Packet),
@@ -299,7 +302,7 @@ pub struct UnixAddr {
 enum UnixAddrKind<'a> {
     Pathname(&'a Path),
     Unnamed,
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     Abstract(&'a [u8]),
 }
 impl<'a> UnixAddrKind<'a> {
@@ -312,7 +315,7 @@ impl<'a> UnixAddrKind<'a> {
         if path_len == 0 {
             return Self::Unnamed;
         }
-        #[cfg(linux_android)]
+        #[cfg(any(linux_android, target_os = "managarm"))]
         if sun.sun_path[0] == 0 {
             let name = unsafe {
                 slice::from_raw_parts(
@@ -383,7 +386,7 @@ impl UnixAddr {
     /// thus the input `path` is expected to be the bare name, not NUL-prefixed.
     /// This is a Linux-specific extension, primarily used to allow chrooted
     /// processes to communicate with processes having a different filesystem view.
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     #[allow(clippy::unnecessary_cast)] // Not unnecessary on all platforms
     pub fn new_abstract(path: &[u8]) -> Result<UnixAddr> {
         unsafe {
@@ -413,7 +416,7 @@ impl UnixAddr {
     }
 
     /// Create a new `sockaddr_un` representing an "unnamed" unix socket address.
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     pub fn new_unnamed() -> UnixAddr {
         let ret = libc::sockaddr_un {
             sun_family: AddressFamily::Unix as sa_family_t,
@@ -446,6 +449,7 @@ impl UnixAddr {
                      target_os = "fuchsia",
                      solarish,
                      target_os = "redox",
+                     target_os = "managarm"
                 ))]
             {
                 UnixAddr { sun, sun_len }
@@ -473,7 +477,7 @@ impl UnixAddr {
     ///
     /// For abstract sockets only the bare name is returned, without the
     /// leading NUL byte. `None` is returned for unnamed or path-backed sockets.
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     pub fn as_abstract(&self) -> Option<&[u8]> {
         match self.kind() {
             UnixAddrKind::Abstract(name) => Some(name),
@@ -482,7 +486,7 @@ impl UnixAddr {
     }
 
     /// Check if this address is an "unnamed" unix socket address.
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     #[inline]
     pub fn is_unnamed(&self) -> bool {
         matches!(self.kind(), UnixAddrKind::Unnamed)
@@ -510,6 +514,7 @@ impl UnixAddr {
                      target_os = "fuchsia",
                      solarish,
                      target_os = "redox",
+                     target_os = "managarm"
                 ))]
             {
                 self.sun_len
@@ -526,7 +531,8 @@ impl SockaddrLike for UnixAddr {
         linux_android,
         target_os = "fuchsia",
         solarish,
-        target_os = "redox"
+        target_os = "redox",
+        target_os = "managarm"
     ))]
     fn len(&self) -> libc::socklen_t {
         self.sun_len.into()
@@ -556,6 +562,7 @@ impl SockaddrLike for UnixAddr {
                          target_os = "fuchsia",
                          solarish,
                          target_os = "redox",
+                         target_os = "managarm"
                 ))] {
                 let su_len = len.unwrap_or(
                     mem::size_of::<libc::sockaddr_un>() as libc::socklen_t
@@ -586,6 +593,7 @@ impl SockaddrLike for UnixAddr {
                          target_os = "fuchsia",
                          solarish,
                          target_os = "redox",
+                         target_os = "managarm"
                 ))] {
                 self.sun_len = new_length as u8;
             }
@@ -600,7 +608,7 @@ impl AsRef<libc::sockaddr_un> for UnixAddr {
     }
 }
 
-#[cfg(linux_android)]
+#[cfg(any(linux_android, target_os = "managarm"))]
 fn fmt_abstract(abs: &[u8], f: &mut fmt::Formatter) -> fmt::Result {
     use fmt::Write;
     f.write_str("@\"")?;
@@ -617,7 +625,7 @@ impl fmt::Display for UnixAddr {
         match self.kind() {
             UnixAddrKind::Pathname(path) => path.display().fmt(f),
             UnixAddrKind::Unnamed => f.pad("<unbound UNIX socket>"),
-            #[cfg(linux_android)]
+            #[cfg(any(linux_android, target_os = "managarm"))]
             UnixAddrKind::Abstract(name) => fmt_abstract(name, f),
         }
     }
@@ -1114,7 +1122,7 @@ pub union SockaddrStorage {
     ))]
     #[cfg_attr(docsrs, doc(cfg(feature = "net")))]
     dl: LinkAddr,
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     nl: NetlinkAddr,
     #[cfg(all(feature = "ioctl", apple_targets))]
     #[cfg_attr(docsrs, doc(cfg(feature = "ioctl")))]
@@ -1154,6 +1162,7 @@ impl SockaddrLike for SockaddrStorage {
                     linux_android,
                     target_os = "fuchsia",
                     solarish,
+                    target_os = "managarm"
                 ))]
                 if i32::from(ss.ss_family) == libc::AF_UNIX {
                     // Safe because we UnixAddr is strictly smaller than
@@ -1188,7 +1197,7 @@ impl SockaddrLike for SockaddrStorage {
                 libc::AF_LINK => unsafe {
                     LinkAddr::from_raw(addr, l).map(|dl| Self { dl })
                 },
-                #[cfg(linux_android)]
+                #[cfg(any(linux_android, target_os = "managarm"))]
                 libc::AF_NETLINK => unsafe {
                     NetlinkAddr::from_raw(addr, l).map(|nl| Self { nl })
                 },
@@ -1210,7 +1219,7 @@ impl SockaddrLike for SockaddrStorage {
         }
     }
 
-    #[cfg(any(linux_android, target_os = "fuchsia", solarish))]
+    #[cfg(any(linux_android, target_os = "fuchsia", solarish, target_os = "managarm"))]
     fn len(&self) -> libc::socklen_t {
         match self.as_unix_addr() {
             // The UnixAddr type knows its own length
@@ -1272,6 +1281,7 @@ impl SockaddrStorage {
             if #[cfg(any(linux_android,
                      target_os = "fuchsia",
                      solarish,
+                     target_os = "managarm"
                 ))]
             {
                 let p = unsafe{ &self.ss as *const libc::sockaddr_storage };
@@ -1301,6 +1311,7 @@ impl SockaddrStorage {
             if #[cfg(any(linux_android,
                      target_os = "fuchsia",
                      solarish,
+                     target_os = "managarm"
                 ))]
             {
                 let p = unsafe{ &self.ss as *const libc::sockaddr_storage };
@@ -1328,7 +1339,7 @@ impl SockaddrStorage {
     accessors! {as_alg_addr, as_alg_addr_mut, AlgAddr,
     AddressFamily::Alg, libc::sockaddr_alg, alg}
 
-    #[cfg(any(linux_android, target_os = "fuchsia"))]
+    #[cfg(any(linux_android, target_os = "fuchsia", target_os = "managarm"))]
     #[cfg(feature = "net")]
     accessors! {
     as_link_addr, as_link_addr_mut, LinkAddr,
@@ -1350,7 +1361,7 @@ impl SockaddrStorage {
     as_sockaddr_in6, as_sockaddr_in6_mut, SockaddrIn6,
     AddressFamily::Inet6, libc::sockaddr_in6, sin6}
 
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     accessors! {as_netlink_addr, as_netlink_addr_mut, NetlinkAddr,
     AddressFamily::Netlink, libc::sockaddr_nl, nl}
 
@@ -1387,7 +1398,7 @@ impl fmt::Display for SockaddrStorage {
                 #[cfg(any(bsd, solarish))]
                 #[cfg(feature = "net")]
                 libc::AF_LINK => self.dl.fmt(f),
-                #[cfg(linux_android)]
+                #[cfg(any(linux_android, target_os = "managarm"))]
                 libc::AF_NETLINK => self.nl.fmt(f),
                 #[cfg(any(linux_android, target_os = "fuchsia"))]
                 #[cfg(feature = "net")]
@@ -1449,7 +1460,7 @@ impl Hash for SockaddrStorage {
                 #[cfg(any(bsd, solarish))]
                 #[cfg(feature = "net")]
                 libc::AF_LINK => self.dl.hash(s),
-                #[cfg(linux_android)]
+                #[cfg(any(linux_android, target_os = "managarm"))]
                 libc::AF_NETLINK => self.nl.hash(s),
                 #[cfg(any(linux_android, target_os = "fuchsia"))]
                 #[cfg(feature = "net")]
@@ -1479,7 +1490,7 @@ impl PartialEq for SockaddrStorage {
                 #[cfg(any(bsd, solarish))]
                 #[cfg(feature = "net")]
                 (libc::AF_LINK, libc::AF_LINK) => self.dl == other.dl,
-                #[cfg(linux_android)]
+                #[cfg(any(linux_android, target_os = "managarm"))]
                 (libc::AF_NETLINK, libc::AF_NETLINK) => self.nl == other.nl,
                 #[cfg(any(linux_android, target_os = "fuchsia"))]
                 #[cfg(feature = "net")]
@@ -1512,7 +1523,7 @@ pub(super) mod private {
     }
 }
 
-#[cfg(linux_android)]
+#[cfg(any(linux_android, target_os = "managarm"))]
 pub mod netlink {
     use super::*;
     use crate::sys::socket::addr::AddressFamily;
@@ -1813,7 +1824,7 @@ pub mod sys_control {
 }
 }
 
-#[cfg(any(linux_android, target_os = "fuchsia"))]
+#[cfg(any(linux_android, target_os = "fuchsia", target_os = "managarm"))]
 mod datalink {
     feature! {
     #![feature = "net"]
diff --git a/src/sys/socket/mod.rs b/src/sys/socket/mod.rs
index 1f1869e..1d36984 100644
--- a/src/sys/socket/mod.rs
+++ b/src/sys/socket/mod.rs
@@ -1,7 +1,7 @@
 //! Socket interface functions
 //!
 //! [Further reading](https://man7.org/linux/man-pages/man7/socket.7.html)
-#[cfg(any(target_os = "freebsd", linux_android))]
+#[cfg(any(target_os = "freebsd", linux_android, target_os = "managarm"))]
 #[cfg(feature = "uio")]
 use crate::sys::time::TimeSpec;
 #[cfg(not(target_os = "redox"))]
@@ -48,7 +48,7 @@ pub use self::addr::{SockaddrIn, SockaddrIn6};
 
 #[cfg(linux_android)]
 pub use crate::sys::socket::addr::alg::AlgAddr;
-#[cfg(linux_android)]
+#[cfg(any(linux_android, target_os = "managarm"))]
 pub use crate::sys::socket::addr::netlink::NetlinkAddr;
 #[cfg(apple_targets)]
 #[cfg(feature = "ioctl")]
@@ -130,68 +130,68 @@ pub enum SockProtocol {
     /// Receives routing and link updates and may be used to modify the routing tables (both IPv4 and IPv6), IP addresses, link
     // parameters, neighbor setups, queueing disciplines, traffic classes and packet classifiers
     /// ([ref](https://www.man7.org/linux/man-pages/man7/netlink.7.html))
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     NetlinkRoute = libc::NETLINK_ROUTE,
     /// Reserved for user-mode socket protocols
     /// ([ref](https://www.man7.org/linux/man-pages/man7/netlink.7.html))
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     NetlinkUserSock = libc::NETLINK_USERSOCK,
     /// Query information about sockets of various protocol families from the kernel
     /// ([ref](https://www.man7.org/linux/man-pages/man7/netlink.7.html))
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     NetlinkSockDiag = libc::NETLINK_SOCK_DIAG,
     /// Netfilter/iptables ULOG.
     /// ([ref](https://www.man7.org/linux/man-pages/man7/netlink.7.html))
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     NetlinkNFLOG = libc::NETLINK_NFLOG,
     /// SELinux event notifications.
     /// ([ref](https://www.man7.org/linux/man-pages/man7/netlink.7.html))
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     NetlinkSELinux = libc::NETLINK_SELINUX,
     /// Open-iSCSI
     /// ([ref](https://www.man7.org/linux/man-pages/man7/netlink.7.html))
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     NetlinkISCSI = libc::NETLINK_ISCSI,
     /// Auditing
     /// ([ref](https://www.man7.org/linux/man-pages/man7/netlink.7.html))
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     NetlinkAudit = libc::NETLINK_AUDIT,
     /// Access to FIB lookup from user space
     /// ([ref](https://www.man7.org/linux/man-pages/man7/netlink.7.html))
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     NetlinkFIBLookup = libc::NETLINK_FIB_LOOKUP,
     /// Netfilter subsystem
     /// ([ref](https://www.man7.org/linux/man-pages/man7/netlink.7.html))
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     NetlinkNetFilter = libc::NETLINK_NETFILTER,
     /// SCSI Transports
     /// ([ref](https://www.man7.org/linux/man-pages/man7/netlink.7.html))
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     NetlinkSCSITransport = libc::NETLINK_SCSITRANSPORT,
     /// Infiniband RDMA
     /// ([ref](https://www.man7.org/linux/man-pages/man7/netlink.7.html))
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     NetlinkRDMA = libc::NETLINK_RDMA,
     /// Transport IPv6 packets from netfilter to user space.  Used by ip6_queue kernel module.
     /// ([ref](https://www.man7.org/linux/man-pages/man7/netlink.7.html))
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     NetlinkIPv6Firewall = libc::NETLINK_IP6_FW,
     /// DECnet routing messages
     /// ([ref](https://www.man7.org/linux/man-pages/man7/netlink.7.html))
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     NetlinkDECNetRoutingMessage = libc::NETLINK_DNRTMSG,
     /// Kernel messages to user space
     /// ([ref](https://www.man7.org/linux/man-pages/man7/netlink.7.html))
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     NetlinkKObjectUEvent = libc::NETLINK_KOBJECT_UEVENT,
     /// Generic netlink family for simplified netlink usage.
     /// ([ref](https://www.man7.org/linux/man-pages/man7/netlink.7.html))
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     NetlinkGeneric = libc::NETLINK_GENERIC,
     /// Netlink interface to request information about ciphers registered with the kernel crypto API as well as allow
     /// configuration of the kernel crypto API.
     /// ([ref](https://www.man7.org/linux/man-pages/man7/netlink.7.html))
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     NetlinkCrypto = libc::NETLINK_CRYPTO,
     /// Non-DIX type protocol number defined for the Ethernet IEEE 802.3 interface that allows packets of all protocols
     /// defined in the interface to be received.
@@ -257,13 +257,13 @@ libc_bitflags! {
         #[cfg(any(linux_android,
                   freebsdlike,
                   netbsdlike,
-                  solarish))]
+                  solarish, target_os = "managarm"))]
         SOCK_NONBLOCK;
         /// Set close-on-exec on the new descriptor
         #[cfg(any(linux_android,
                   freebsdlike,
                   netbsdlike,
-                  solarish))]
+                  solarish, target_os = "managarm"))]
         SOCK_CLOEXEC;
         /// Return `EPIPE` instead of raising `SIGPIPE`
         #[cfg(target_os = "netbsd")]
@@ -319,7 +319,7 @@ libc_bitflags! {
         /// This flag specifies that queued errors should be received from
         /// the socket error queue. (For more details, see
         /// [recvfrom(2)](https://linux.die.net/man/2/recvfrom))
-        #[cfg(linux_android)]
+        #[cfg(any(linux_android, target_os = "managarm"))]
         MSG_ERRQUEUE;
         /// Set the `close-on-exec` flag for the file descriptor received via a UNIX domain
         /// file descriptor using the `SCM_RIGHTS` operation (described in
@@ -328,7 +328,7 @@ libc_bitflags! {
         /// [open(2)](https://pubs.opengroup.org/onlinepubs/9699919799/functions/open.html).
         ///
         /// Only used in [`recvmsg`](fn.recvmsg.html) function.
-        #[cfg(any(linux_android, freebsdlike, netbsdlike))]
+        #[cfg(any(linux_android, freebsdlike, netbsdlike, target_os = "managarm"))]
         MSG_CMSG_CLOEXEC;
         /// Requests not to send `SIGPIPE` errors when the other end breaks the connection.
         /// (For more details, see [send(2)](https://linux.die.net/man/2/send)).
@@ -337,14 +337,16 @@ libc_bitflags! {
                   solarish,
                   netbsdlike,
                   target_os = "fuchsia",
-                  target_os = "haiku"))]
+                  target_os = "haiku",
+                  target_os = "managarm"))]
         MSG_NOSIGNAL;
         /// Turns on [`MSG_DONTWAIT`] after the first message has been received (only for
         /// `recvmmsg()`).
         #[cfg(any(linux_android,
                   netbsdlike,
                   target_os = "fuchsia",
-                  target_os = "freebsd"))]
+                  target_os = "freebsd",
+                  target_os = "managarm"))]
         MSG_WAITFORONE;
     }
 }
@@ -369,7 +371,7 @@ libc_enum! {
 }
 
 cfg_if! {
-    if #[cfg(linux_android)] {
+    if #[cfg(any(linux_android, target_os = "managarm"))] {
         /// Unix credentials of the sending process.
         ///
         /// This struct is used with the `SO_PEERCRED` ancillary message
@@ -661,7 +663,7 @@ pub enum ControlMessageOwned {
     /// Received version of [`ControlMessage::ScmRights`]
     ScmRights(Vec<RawFd>),
     /// Received version of [`ControlMessage::ScmCredentials`]
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     ScmCredentials(UnixCredentials),
     /// Received version of [`ControlMessage::ScmCreds`]
     #[cfg(freebsdlike)]
@@ -727,12 +729,12 @@ pub enum ControlMessageOwned {
     /// A set of nanosecond resolution timestamps
     ///
     /// [Further reading](https://www.kernel.org/doc/html/latest/networking/timestamping.html)
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     ScmTimestampsns(Timestamps),
     /// Nanoseconds resolution timestamp
     ///
     /// [Further reading](https://www.kernel.org/doc/html/latest/networking/timestamping.html)
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     ScmTimestampns(TimeSpec),
     /// Realtime clock timestamp
     ///
@@ -744,11 +746,11 @@ pub enum ControlMessageOwned {
     /// [Further reading](https://man.freebsd.org/cgi/man.cgi?setsockopt)
     #[cfg(target_os = "freebsd")]
     ScmMonotonic(TimeSpec),
-    #[cfg(any(linux_android, apple_targets, target_os = "netbsd"))]
+    #[cfg(any(linux_android, apple_targets, target_os = "netbsd", target_os = "managarm"))]
     #[cfg(feature = "net")]
     #[cfg_attr(docsrs, doc(cfg(feature = "net")))]
     Ipv4PacketInfo(libc::in_pktinfo),
-    #[cfg(any(linux_android, bsd))]
+    #[cfg(any(linux_android, bsd, target_os = "managarm"))]
     #[cfg(feature = "net")]
     #[cfg_attr(docsrs, doc(cfg(feature = "net")))]
     Ipv6PacketInfo(libc::in6_pktinfo),
@@ -790,7 +792,7 @@ pub enum ControlMessageOwned {
     ///
     /// `RxqOvfl` socket option should be enabled on a socket
     /// to allow receiving the drop counter.
-    #[cfg(any(linux_android, target_os = "fuchsia"))]
+    #[cfg(any(linux_android, target_os = "fuchsia", target_os = "managarm"))]
     RxqOvfl(u32),
 
     /// Socket error queue control messages read with the `MSG_ERRQUEUE` flag.
@@ -814,7 +816,7 @@ pub enum ControlMessageOwned {
 }
 
 /// For representing packet timestamps via `SO_TIMESTAMPING` interface
-#[cfg(linux_android)]
+#[cfg(any(linux_android, target_os = "managarm"))]
 #[derive(Copy, Clone, Debug, Eq, PartialEq)]
 pub struct Timestamps {
     /// software based timestamp, usually one containing data
@@ -881,7 +883,7 @@ impl ControlMessageOwned {
                 }
                 ControlMessageOwned::ScmRights(fds)
             },
-            #[cfg(linux_android)]
+            #[cfg(any(linux_android, target_os = "managarm"))]
             (libc::SOL_SOCKET, libc::SCM_CREDENTIALS) => {
                 let cred: libc::ucred = unsafe { ptr::read_unaligned(p as *const _) };
                 ControlMessageOwned::ScmCredentials(cred.into())
@@ -896,7 +898,7 @@ impl ControlMessageOwned {
                 let tv: libc::timeval = unsafe { ptr::read_unaligned(p as *const _) };
                 ControlMessageOwned::ScmTimestamp(TimeVal::from(tv))
             },
-            #[cfg(linux_android)]
+            #[cfg(any(linux_android, target_os = "managarm"))]
             (libc::SOL_SOCKET, libc::SCM_TIMESTAMPNS) => {
                 let ts: libc::timespec = unsafe { ptr::read_unaligned(p as *const _) };
                 ControlMessageOwned::ScmTimestampns(TimeSpec::from(ts))
@@ -911,7 +913,7 @@ impl ControlMessageOwned {
                 let ts: libc::timespec = unsafe { ptr::read_unaligned(p as *const _) };
                 ControlMessageOwned::ScmMonotonic(TimeSpec::from(ts))
             }
-            #[cfg(linux_android)]
+            #[cfg(any(linux_android, target_os = "managarm"))]
             (libc::SOL_SOCKET, libc::SCM_TIMESTAMPING) => {
                 let tp = p as *const libc::timespec;
                 let ts: libc::timespec = unsafe { ptr::read_unaligned(tp) };
@@ -923,13 +925,13 @@ impl ControlMessageOwned {
                 let timestamping = Timestamps { system, hw_trans, hw_raw };
                 ControlMessageOwned::ScmTimestampsns(timestamping)
             }
-            #[cfg(any(target_os = "freebsd", linux_android, apple_targets))]
+            #[cfg(any(target_os = "freebsd", linux_android, apple_targets, target_os = "managarm"))]
             #[cfg(feature = "net")]
             (libc::IPPROTO_IPV6, libc::IPV6_PKTINFO) => {
                 let info = unsafe { ptr::read_unaligned(p as *const libc::in6_pktinfo) };
                 ControlMessageOwned::Ipv6PacketInfo(info)
             }
-            #[cfg(any(linux_android, apple_targets, target_os = "netbsd"))]
+            #[cfg(any(linux_android, apple_targets, target_os = "netbsd", target_os = "managarm"))]
             #[cfg(feature = "net")]
             (libc::IPPROTO_IP, libc::IP_PKTINFO) => {
                 let info = unsafe { ptr::read_unaligned(p as *const libc::in_pktinfo) };
@@ -959,18 +961,18 @@ impl ControlMessageOwned {
                 let gso_size: i32 = unsafe { ptr::read_unaligned(p as *const _) };
                 ControlMessageOwned::UdpGroSegments(gso_size)
             },
-            #[cfg(any(linux_android, target_os = "fuchsia"))]
+            #[cfg(any(linux_android, target_os = "fuchsia", target_os = "managarm"))]
             (libc::SOL_SOCKET, libc::SO_RXQ_OVFL) => {
                 let drop_counter = unsafe { ptr::read_unaligned(p as *const u32) };
                 ControlMessageOwned::RxqOvfl(drop_counter)
             },
-            #[cfg(linux_android)]
+            #[cfg(any(linux_android))]
             #[cfg(feature = "net")]
             (libc::IPPROTO_IP, libc::IP_RECVERR) => {
                 let (err, addr) = unsafe { Self::recv_err_helper::<sockaddr_in>(p, len) };
                 ControlMessageOwned::Ipv4RecvErr(err, addr)
             },
-            #[cfg(linux_android)]
+            #[cfg(any(linux_android))]
             #[cfg(feature = "net")]
             (libc::IPPROTO_IPV6, libc::IPV6_RECVERR) => {
                 let (err, addr) = unsafe { Self::recv_err_helper::<sockaddr_in6>(p, len) };
@@ -1046,7 +1048,7 @@ pub enum ControlMessage<'a> {
     ///
     /// For further information, please refer to the
     /// [`unix(7)`](https://man7.org/linux/man-pages/man7/unix.7.html) man page.
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     ScmCredentials(&'a UnixCredentials),
     /// A message of type `SCM_CREDS`, containing the pid, uid, euid, gid and groups of
     /// a process connected to the socket.
@@ -1101,7 +1103,7 @@ pub enum ControlMessage<'a> {
     ///
     /// For further information, please refer to the
     /// [`ip(7)`](https://man7.org/linux/man-pages/man7/ip.7.html) man page.
-    #[cfg(any(linux_android, target_os = "netbsd", apple_targets))]
+    #[cfg(any(linux_android, target_os = "netbsd", apple_targets, target_os = "managarm"))]
     #[cfg(feature = "net")]
     #[cfg_attr(docsrs, doc(cfg(feature = "net")))]
     Ipv4PacketInfo(&'a libc::in_pktinfo),
@@ -1113,7 +1115,7 @@ pub enum ControlMessage<'a> {
     #[cfg(any(linux_android,
               target_os = "netbsd",
               target_os = "freebsd",
-              apple_targets))]
+              apple_targets, target_os = "managarm"))]
     #[cfg(feature = "net")]
     #[cfg_attr(docsrs, doc(cfg(feature = "net")))]
     Ipv6PacketInfo(&'a libc::in6_pktinfo),
@@ -1142,7 +1144,7 @@ pub enum ControlMessage<'a> {
     /// skbs indicating the number of packets dropped by the
     /// socket between the last recieved packet and this
     /// received packet.
-    #[cfg(any(linux_android, target_os = "fuchsia"))]
+    #[cfg(any(linux_android, target_os = "fuchsia", target_os = "managarm"))]
     RxqOvfl(&'a u32),
 
     /// Configure the transmission time of packets.
@@ -1168,13 +1170,13 @@ impl<'a> ControlMessage<'a> {
 
     /// The value of CMSG_LEN on this message.
     /// Safe because CMSG_LEN is always safe
-    #[cfg(any(target_os = "android",
+    #[cfg(any(target_os = "android", target_os = "managarm",
               all(target_os = "linux", not(target_env = "musl"))))]
     fn cmsg_len(&self) -> usize {
         unsafe{CMSG_LEN(self.len() as libc::c_uint) as usize}
     }
 
-    #[cfg(not(any(target_os = "android",
+    #[cfg(not(any(target_os = "android", target_os = "managarm",
                   all(target_os = "linux", not(target_env = "musl")))))]
     fn cmsg_len(&self) -> libc::c_uint {
         unsafe{CMSG_LEN(self.len() as libc::c_uint)}
@@ -1186,7 +1188,7 @@ impl<'a> ControlMessage<'a> {
             ControlMessage::ScmRights(fds) => {
                 fds as *const _ as *const u8
             },
-            #[cfg(linux_android)]
+            #[cfg(any(linux_android, target_os = "managarm"))]
             ControlMessage::ScmCredentials(creds) => {
                 &creds.0 as *const libc::ucred as *const u8
             }
@@ -1235,10 +1237,10 @@ impl<'a> ControlMessage<'a> {
             ControlMessage::UdpGsoSegments(gso_size) => {
                 gso_size as *const _ as *const u8
             },
-            #[cfg(any(linux_android, target_os = "netbsd", apple_targets))]
+            #[cfg(any(linux_android, target_os = "netbsd", apple_targets, target_os = "managarm"))]
             #[cfg(feature = "net")]
             ControlMessage::Ipv4PacketInfo(info) => info as *const _ as *const u8,
-            #[cfg(any(linux_android, target_os = "netbsd",
+            #[cfg(any(linux_android, target_os = "netbsd", target_os = "managarm",
                       target_os = "freebsd", apple_targets))]
             #[cfg(feature = "net")]
             ControlMessage::Ipv6PacketInfo(info) => info as *const _ as *const u8,
@@ -1248,7 +1250,7 @@ impl<'a> ControlMessage<'a> {
             #[cfg(any(linux_android, freebsdlike, apple_targets, target_os = "haiku"))]
             #[cfg(feature = "net")]
             ControlMessage::Ipv6HopLimit(limit) => limit as *const _ as *const u8,
-            #[cfg(any(linux_android, target_os = "fuchsia"))]
+            #[cfg(any(linux_android, target_os = "fuchsia", target_os = "managarm"))]
             ControlMessage::RxqOvfl(drop_count) => {
                 drop_count as *const _ as *const u8
             },
@@ -1272,7 +1274,7 @@ impl<'a> ControlMessage<'a> {
             ControlMessage::ScmRights(fds) => {
                 mem::size_of_val(fds)
             },
-            #[cfg(linux_android)]
+            #[cfg(any(linux_android, target_os = "managarm"))]
             ControlMessage::ScmCredentials(creds) => {
                 mem::size_of_val(creds)
             }
@@ -1297,10 +1299,10 @@ impl<'a> ControlMessage<'a> {
             ControlMessage::UdpGsoSegments(gso_size) => {
                 mem::size_of_val(gso_size)
             },
-            #[cfg(any(linux_android, target_os = "netbsd", apple_targets))]
+            #[cfg(any(linux_android, target_os = "netbsd", apple_targets, target_os = "managarm"))]
             #[cfg(feature = "net")]
             ControlMessage::Ipv4PacketInfo(info) => mem::size_of_val(info),
-            #[cfg(any(linux_android, target_os = "netbsd",
+            #[cfg(any(linux_android, target_os = "netbsd", target_os = "managarm",
                       target_os = "freebsd", apple_targets))]
             #[cfg(feature = "net")]
             ControlMessage::Ipv6PacketInfo(info) => mem::size_of_val(info),
@@ -1312,7 +1314,7 @@ impl<'a> ControlMessage<'a> {
             ControlMessage::Ipv6HopLimit(limit) => {
                 mem::size_of_val(limit)
             },
-            #[cfg(any(linux_android, target_os = "fuchsia"))]
+            #[cfg(any(linux_android, target_os = "fuchsia", target_os = "managarm"))]
             ControlMessage::RxqOvfl(drop_count) => {
                 mem::size_of_val(drop_count)
             },
@@ -1327,7 +1329,7 @@ impl<'a> ControlMessage<'a> {
     fn cmsg_level(&self) -> libc::c_int {
         match *self {
             ControlMessage::ScmRights(_) => libc::SOL_SOCKET,
-            #[cfg(linux_android)]
+            #[cfg(any(linux_android, target_os = "managarm"))]
             ControlMessage::ScmCredentials(_) => libc::SOL_SOCKET,
             #[cfg(freebsdlike)]
             ControlMessage::ScmCreds => libc::SOL_SOCKET,
@@ -1337,10 +1339,10 @@ impl<'a> ControlMessage<'a> {
             #[cfg(target_os = "linux")]
             #[cfg(feature = "net")]
             ControlMessage::UdpGsoSegments(_) => libc::SOL_UDP,
-            #[cfg(any(linux_android, target_os = "netbsd", apple_targets))]
+            #[cfg(any(linux_android, target_os = "netbsd", apple_targets, target_os = "managarm"))]
             #[cfg(feature = "net")]
             ControlMessage::Ipv4PacketInfo(_) => libc::IPPROTO_IP,
-            #[cfg(any(linux_android, target_os = "netbsd",
+            #[cfg(any(linux_android, target_os = "netbsd", target_os = "managarm",
                       target_os = "freebsd", apple_targets))]
             #[cfg(feature = "net")]
             ControlMessage::Ipv6PacketInfo(_) => libc::IPPROTO_IPV6,
@@ -1350,7 +1352,7 @@ impl<'a> ControlMessage<'a> {
             #[cfg(any(linux_android, freebsdlike, apple_targets, target_os = "haiku"))]
             #[cfg(feature = "net")]
             ControlMessage::Ipv6HopLimit(_) => libc::IPPROTO_IPV6,
-            #[cfg(any(linux_android, target_os = "fuchsia"))]
+            #[cfg(any(linux_android, target_os = "fuchsia", target_os = "managarm"))]
             ControlMessage::RxqOvfl(_) => libc::SOL_SOCKET,
             #[cfg(target_os = "linux")]
             ControlMessage::TxTime(_) => libc::SOL_SOCKET,
@@ -1361,7 +1363,7 @@ impl<'a> ControlMessage<'a> {
     fn cmsg_type(&self) -> libc::c_int {
         match *self {
             ControlMessage::ScmRights(_) => libc::SCM_RIGHTS,
-            #[cfg(linux_android)]
+            #[cfg(any(linux_android, target_os = "managarm"))]
             ControlMessage::ScmCredentials(_) => libc::SCM_CREDENTIALS,
             #[cfg(freebsdlike)]
             ControlMessage::ScmCreds => libc::SCM_CREDS,
@@ -1382,10 +1384,10 @@ impl<'a> ControlMessage<'a> {
             ControlMessage::UdpGsoSegments(_) => {
                 libc::UDP_SEGMENT
             },
-            #[cfg(any(linux_android, target_os = "netbsd", apple_targets))]
+            #[cfg(any(linux_android, target_os = "netbsd", apple_targets, target_os = "managarm"))]
             #[cfg(feature = "net")]
             ControlMessage::Ipv4PacketInfo(_) => libc::IP_PKTINFO,
-            #[cfg(any(linux_android, target_os = "netbsd",
+            #[cfg(any(linux_android, target_os = "netbsd", target_os = "managarm",
                       target_os = "freebsd", apple_targets))]
             #[cfg(feature = "net")]
             ControlMessage::Ipv6PacketInfo(_) => libc::IPV6_PKTINFO,
@@ -1395,7 +1397,7 @@ impl<'a> ControlMessage<'a> {
             #[cfg(any(linux_android, freebsdlike, apple_targets, target_os = "haiku"))]
             #[cfg(feature = "net")]
             ControlMessage::Ipv6HopLimit(_) => libc::IPV6_HOPLIMIT,
-            #[cfg(any(linux_android, target_os = "fuchsia"))]
+            #[cfg(any(linux_android, target_os = "fuchsia", target_os = "managarm"))]
             ControlMessage::RxqOvfl(_) => {
                 libc::SO_RXQ_OVFL
             },
@@ -1494,7 +1496,7 @@ pub fn sendmsg<S>(fd: RawFd, iov: &[IoSlice<'_>], cmsgs: &[ControlMessage],
 ///
 /// # References
 /// [`sendmsg`](fn.sendmsg.html)
-#[cfg(any(linux_android, target_os = "freebsd", target_os = "netbsd"))]
+#[cfg(any(linux_android, target_os = "freebsd", target_os = "netbsd", target_os = "managarm"))]
 pub fn sendmmsg<'a, XS, AS, C, I, S>(
     fd: RawFd,
     data: &'a mut MultiHeaders<S>,
@@ -1565,7 +1567,7 @@ pub fn sendmmsg<'a, XS, AS, C, I, S>(
 }
 
 
-#[cfg(any(linux_android, target_os = "freebsd", target_os = "netbsd"))]
+#[cfg(any(linux_android, target_os = "freebsd", target_os = "netbsd", target_os = "managarm"))]
 #[derive(Debug)]
 /// Preallocated structures needed for [`recvmmsg`] and [`sendmmsg`] functions
 pub struct MultiHeaders<S> {
@@ -1578,7 +1580,7 @@ pub struct MultiHeaders<S> {
     msg_controllen: usize,
 }
 
-#[cfg(any(linux_android, target_os = "freebsd", target_os = "netbsd"))]
+#[cfg(any(linux_android, target_os = "freebsd", target_os = "netbsd", target_os = "managarm"))]
 impl<S> MultiHeaders<S> {
     /// Preallocate structure used by [`recvmmsg`] and [`sendmmsg`] takes number of headers to preallocate
     ///
@@ -1648,7 +1650,7 @@ impl<S> MultiHeaders<S> {
 // always produce the desired results - see https://github.com/nix-rust/nix/pull/1744 for more
 // details
 
-#[cfg(any(linux_android, target_os = "freebsd", target_os = "netbsd"))]
+#[cfg(any(linux_android, target_os = "freebsd", target_os = "netbsd", target_os = "managarm"))]
 pub fn recvmmsg<'a, XS, S, I>(
     fd: RawFd,
     data: &'a mut MultiHeaders<S>,
@@ -1697,7 +1699,7 @@ where
 }
 
 /// Iterator over results of [`recvmmsg`]/[`sendmmsg`]
-#[cfg(any(linux_android, target_os = "freebsd", target_os = "netbsd"))]
+#[cfg(any(linux_android, target_os = "freebsd", target_os = "netbsd", target_os = "managarm"))]
 #[derive(Debug)]
 pub struct MultiResults<'a, S> {
     // preallocated structures
@@ -1706,7 +1708,7 @@ pub struct MultiResults<'a, S> {
     received: usize,
 }
 
-#[cfg(any(linux_android, target_os = "freebsd", target_os = "netbsd"))]
+#[cfg(any(linux_android, target_os = "freebsd", target_os = "netbsd", target_os = "managarm"))]
 impl<'a, S> Iterator for MultiResults<'a, S>
 where
     S: Copy + SockaddrLike,
@@ -2096,6 +2098,7 @@ pub fn accept(sockfd: RawFd) -> Result<RawFd> {
     target_os = "fuchsia",
     solarish,
     target_os = "linux",
+    target_os = "managarm"
 ))]
 pub fn accept4(sockfd: RawFd, flags: SockFlag) -> Result<RawFd> {
     let res = unsafe {
diff --git a/src/sys/socket/sockopt.rs b/src/sys/socket/sockopt.rs
index f66b54e..be8c6fa 100644
--- a/src/sys/socket/sockopt.rs
+++ b/src/sys/socket/sockopt.rs
@@ -12,7 +12,7 @@ use std::os::unix::io::{AsFd, AsRawFd};
 
 // Constants
 // TCP_CA_NAME_MAX isn't defined in user space include files
-#[cfg(any(target_os = "freebsd", target_os = "linux"))]
+#[cfg(any(target_os = "freebsd", target_os = "linux", target_os = "managarm"))]
 #[cfg(feature = "net")]
 const TCP_CA_NAME_MAX: usize = 16;
 
@@ -386,7 +386,7 @@ sockopt_impl!(
     libc::IP_MULTICAST_LOOP,
     bool
 );
-#[cfg(target_os = "linux")]
+#[cfg(any(target_os = "linux", target_os = "managarm"))]
 #[cfg(feature = "net")]
 sockopt_impl!(
     #[cfg_attr(docsrs, doc(cfg(feature = "net")))]
@@ -398,7 +398,7 @@ sockopt_impl!(
     libc::SO_PRIORITY,
     libc::c_int
 );
-#[cfg(target_os = "linux")]
+#[cfg(any(target_os = "linux", target_os = "managarm"))]
 #[cfg(feature = "net")]
 sockopt_impl!(
     #[cfg_attr(docsrs, doc(cfg(feature = "net")))]
@@ -410,7 +410,7 @@ sockopt_impl!(
     libc::IP_TOS,
     libc::c_int
 );
-#[cfg(target_os = "linux")]
+#[cfg(any(target_os = "linux", target_os = "managarm"))]
 #[cfg(feature = "net")]
 sockopt_impl!(
     #[cfg_attr(docsrs, doc(cfg(feature = "net")))]
@@ -523,7 +523,7 @@ sockopt_impl!(
     libc::LOCAL_PEERPID,
     libc::c_int
 );
-#[cfg(linux_android)]
+#[cfg(any(linux_android, target_os = "managarm"))]
 sockopt_impl!(
     /// Return the credentials of the foreign process connected to this socket.
     PeerCredentials,
@@ -619,7 +619,7 @@ sockopt_impl!(
     libc::TCP_KEEPINTVL,
     u32
 );
-#[cfg(any(target_os = "fuchsia", target_os = "linux"))]
+#[cfg(any(target_os = "fuchsia", target_os = "linux", target_os = "managarm"))]
 #[cfg(feature = "net")]
 sockopt_impl!(
     #[cfg_attr(docsrs, doc(cfg(feature = "net")))]
@@ -852,7 +852,7 @@ sockopt_impl!(
     libc::SO_ACCEPTFILTER,
     libc::accept_filter_arg
 );
-#[cfg(target_os = "linux")]
+#[cfg(any(target_os = "linux", target_os = "managarm"))]
 sockopt_impl!(
     /// Set the mark for each packet sent through this socket (similar to the
     /// netfilter MARK target but socket-based).
@@ -872,7 +872,7 @@ sockopt_impl!(
     libc::SO_PASSCRED,
     bool
 );
-#[cfg(any(target_os = "freebsd", target_os = "linux"))]
+#[cfg(any(target_os = "freebsd", target_os = "linux", target_os = "managarm"))]
 #[cfg(feature = "net")]
 sockopt_impl!(
     #[cfg_attr(docsrs, doc(cfg(feature = "net")))]
@@ -1590,11 +1590,13 @@ impl<'a> Set<'a, OsString> for SetOsString<'a> {
 }
 
 /// Getter for a `CString` value.
+#[cfg(apple_targets)]
 struct GetCString<T: AsMut<[u8]>> {
     len: socklen_t,
     val: MaybeUninit<T>,
 }
 
+#[cfg(apple_targets)]
 impl<T: AsMut<[u8]>> Get<CString> for GetCString<T> {
     fn uninit() -> Self {
         GetCString {
diff --git a/src/sys/termios.rs b/src/sys/termios.rs
index e006c2f..cbfebd2 100644
--- a/src/sys/termios.rs
+++ b/src/sys/termios.rs
@@ -166,7 +166,7 @@ pub struct Termios {
     /// Control characters (see `termios.c_cc` documentation)
     pub control_chars: [libc::cc_t; NCCS],
     /// Line discipline (see `termios.c_line` documentation)
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     pub line_discipline: libc::cc_t,
     /// Line discipline (see `termios.c_line` documentation)
     #[cfg(target_os = "haiku")]
@@ -186,7 +186,7 @@ impl Termios {
             termios.c_cflag = self.control_flags.bits();
             termios.c_lflag = self.local_flags.bits();
             termios.c_cc = self.control_chars;
-            #[cfg(any(linux_android, target_os = "haiku"))]
+            #[cfg(any(linux_android, target_os = "haiku", target_os = "managarm"))]
             {
                 termios.c_line = self.line_discipline;
             }
@@ -208,7 +208,7 @@ impl Termios {
             termios.c_cflag = self.control_flags.bits();
             termios.c_lflag = self.local_flags.bits();
             termios.c_cc = self.control_chars;
-            #[cfg(any(linux_android, target_os = "haiku"))]
+            #[cfg(any(linux_android, target_os = "haiku", target_os = "managarm"))]
             {
                 termios.c_line = self.line_discipline;
             }
@@ -240,7 +240,7 @@ impl From<libc::termios> for Termios {
             control_flags: ControlFlags::from_bits_truncate(termios.c_cflag),
             local_flags: LocalFlags::from_bits_truncate(termios.c_lflag),
             control_chars: termios.c_cc,
-            #[cfg(any(linux_android, target_os = "haiku"))]
+            #[cfg(any(linux_android, target_os = "haiku", target_os = "managarm"))]
             line_discipline: termios.c_line,
         }
     }
@@ -306,32 +306,34 @@ libc_enum! {
         #[cfg(any(linux_android,
                   solarish,
                   target_os = "freebsd",
-                  target_os = "netbsd"))]
+                  target_os = "netbsd",
+                  target_os = "managarm"))]
         B460800,
-        #[cfg(linux_android)]
+        #[cfg(any(linux_android, target_os = "managarm"))]
         B500000,
-        #[cfg(linux_android)]
+        #[cfg(any(linux_android, target_os = "managarm"))]
         B576000,
         #[cfg(any(linux_android,
                   solarish,
                   target_os = "freebsd",
-                  target_os = "netbsd"))]
+                  target_os = "netbsd",
+                  target_os = "managarm"))]
         B921600,
-        #[cfg(linux_android)]
+        #[cfg(any(linux_android, target_os = "managarm"))]
         B1000000,
-        #[cfg(linux_android)]
+        #[cfg(any(linux_android, target_os = "managarm"))]
         B1152000,
-        #[cfg(linux_android)]
+        #[cfg(any(linux_android, target_os = "managarm"))]
         B1500000,
-        #[cfg(linux_android)]
+        #[cfg(any(linux_android, target_os = "managarm"))]
         B2000000,
-        #[cfg(any(target_os = "android", all(target_os = "linux", not(target_arch = "sparc64"))))]
+        #[cfg(any(target_os = "android", target_os = "managarm", all(target_os = "linux", not(target_arch = "sparc64"))))]
         B2500000,
-        #[cfg(any(target_os = "android", all(target_os = "linux", not(target_arch = "sparc64"))))]
+        #[cfg(any(target_os = "android", target_os = "managarm", all(target_os = "linux", not(target_arch = "sparc64"))))]
         B3000000,
-        #[cfg(any(target_os = "android", all(target_os = "linux", not(target_arch = "sparc64"))))]
+        #[cfg(any(target_os = "android", target_os = "managarm", all(target_os = "linux", not(target_arch = "sparc64"))))]
         B3500000,
-        #[cfg(any(target_os = "android", all(target_os = "linux", not(target_arch = "sparc64"))))]
+        #[cfg(any(target_os = "android", target_os = "managarm", all(target_os = "linux", not(target_arch = "sparc64"))))]
         B4000000,
     }
     impl TryFrom<libc::speed_t>
@@ -435,7 +437,7 @@ libc_enum! {
         VSTATUS,
         VSTOP,
         VSUSP,
-        #[cfg(target_os = "linux")]
+        #[cfg(any(target_os = "linux", target_os = "managarm"))]
         VSWTC,
         #[cfg(any(solarish, target_os = "haiku"))]
         VSWTCH,
@@ -453,7 +455,7 @@ libc_enum! {
     all(target_os = "linux", target_arch = "sparc64"),
     solarish,
     target_os = "aix",
-    target_os = "haiku",
+    target_os = "haiku"
 ))]
 impl SpecialCharacterIndices {
     pub const VMIN: SpecialCharacterIndices = SpecialCharacterIndices::VEOF;
@@ -482,7 +484,7 @@ libc_bitflags! {
         IXANY;
         #[cfg(not(any(target_os = "redox", target_os = "haiku")))]
         IMAXBEL;
-        #[cfg(any(linux_android, apple_targets))]
+        #[cfg(any(linux_android, apple_targets, target_os = "managarm"))]
         IUTF8;
     }
 }
@@ -493,7 +495,8 @@ libc_bitflags! {
         OPOST;
         #[cfg(any(linux_android,
                   target_os = "haiku",
-                  target_os = "openbsd"))]
+                  target_os = "openbsd",
+                  target_os = "managarm"))]
         OLCUC;
         ONLCR;
         OCRNL as tcflag_t;
@@ -501,74 +504,91 @@ libc_bitflags! {
         ONLRET as tcflag_t;
         #[cfg(any(linux_android,
                   target_os = "haiku",
+                  target_os = "managarm",
                   apple_targets))]
         OFDEL as tcflag_t;
         #[cfg(any(linux_android,
                   target_os = "haiku",
+                  target_os = "managarm",
                   apple_targets))]
         NL0 as tcflag_t;
         #[cfg(any(linux_android,
                   target_os = "haiku",
+                  target_os = "managarm",
                   apple_targets))]
         NL1 as tcflag_t;
         #[cfg(any(linux_android,
                   target_os = "haiku",
+                  target_os = "managarm",
                   apple_targets))]
         CR0 as tcflag_t;
         #[cfg(any(linux_android,
                   target_os = "haiku",
+                  target_os = "managarm",
                   apple_targets))]
         CR1 as tcflag_t;
         #[cfg(any(linux_android,
                   target_os = "haiku",
+                  target_os = "managarm",
                   apple_targets))]
         CR2 as tcflag_t;
         #[cfg(any(linux_android,
                   target_os = "haiku",
+                  target_os = "managarm",
                   apple_targets))]
         CR3 as tcflag_t;
         #[cfg(any(linux_android,
                   target_os = "freebsd",
                   target_os = "haiku",
+                  target_os = "managarm",
                   apple_targets))]
         TAB0 as tcflag_t;
         #[cfg(any(linux_android,
                   target_os = "haiku",
+                  target_os = "managarm",
                   apple_targets))]
         TAB1 as tcflag_t;
         #[cfg(any(linux_android,
                   target_os = "haiku",
+                  target_os = "managarm",
                   apple_targets))]
         TAB2 as tcflag_t;
         #[cfg(any(linux_android,
                   target_os = "freebsd",
                   target_os = "haiku",
+                  target_os = "managarm",
                   apple_targets))]
         TAB3 as tcflag_t;
-        #[cfg(linux_android)]
+        #[cfg(any(linux_android, target_os = "managarm"))]
         XTABS;
         #[cfg(any(linux_android,
                   target_os = "haiku",
+                  target_os = "managarm",
                   apple_targets))]
         BS0 as tcflag_t;
         #[cfg(any(linux_android,
                   target_os = "haiku",
+                  target_os = "managarm",
                   apple_targets))]
         BS1 as tcflag_t;
         #[cfg(any(linux_android,
                   target_os = "haiku",
+                  target_os = "managarm",
                   apple_targets))]
         VT0 as tcflag_t;
         #[cfg(any(linux_android,
                   target_os = "haiku",
+                  target_os = "managarm",
                   apple_targets))]
         VT1 as tcflag_t;
         #[cfg(any(linux_android,
                   target_os = "haiku",
+                  target_os = "managarm",
                   apple_targets))]
         FF0 as tcflag_t;
         #[cfg(any(linux_android,
                   target_os = "haiku",
+                  target_os = "managarm",
                   apple_targets))]
         FF1 as tcflag_t;
         #[cfg(bsd)]
@@ -582,27 +602,33 @@ libc_bitflags! {
 
         #[cfg(any(linux_android,
                   target_os = "haiku",
+                  target_os = "managarm",
                   apple_targets))]
         NLDLY as tcflag_t; // FIXME: Datatype needs to be corrected in libc for mac
         #[cfg(any(linux_android,
                   target_os = "haiku",
+                  target_os = "managarm",
                   apple_targets))]
         CRDLY as tcflag_t;
         #[cfg(any(linux_android,
                   target_os = "freebsd",
                   target_os = "haiku",
+                  target_os = "managarm",
                   apple_targets))]
         TABDLY as tcflag_t;
         #[cfg(any(linux_android,
                   target_os = "haiku",
+                  target_os = "managarm",
                   apple_targets))]
         BSDLY as tcflag_t;
         #[cfg(any(linux_android,
                   target_os = "haiku",
+                  target_os = "managarm",
                   apple_targets))]
         VTDLY as tcflag_t;
         #[cfg(any(linux_android,
                   target_os = "haiku",
+                  target_os = "managarm",
                   apple_targets))]
         FFDLY as tcflag_t;
     }
@@ -625,15 +651,16 @@ libc_bitflags! {
         CLOCAL;
         #[cfg(not(any(target_os = "redox", target_os = "aix")))]
         CRTSCTS;
-        #[cfg(linux_android)]
+        #[cfg(any(linux_android, target_os = "managarm"))]
         CBAUD;
-        #[cfg(any(target_os = "android", all(target_os = "linux", not(target_arch = "mips"))))]
+        #[cfg(any(target_os = "android", target_os = "managarm", all(target_os = "linux", not(target_arch = "mips"))))]
         CMSPAR;
         #[cfg(any(target_os = "android",
+                  target_os = "managarm",
                   all(target_os = "linux",
                       not(any(target_arch = "powerpc", target_arch = "powerpc64")))))]
         CIBAUD;
-        #[cfg(linux_android)]
+        #[cfg(any(linux_android, target_os = "managarm"))]
         CBAUDEX;
         #[cfg(bsd)]
         MDMBUF;
diff --git a/src/sys/time.rs b/src/sys/time.rs
index af436ca..918d135 100644
--- a/src/sys/time.rs
+++ b/src/sys/time.rs
@@ -13,13 +13,14 @@ const fn zero_init_timespec() -> timespec {
 }
 
 #[cfg(any(
-    all(feature = "time", any(target_os = "android", target_os = "linux")),
+    all(feature = "time", any(target_os = "android", target_os = "linux", target_os = "managarm")),
     all(
         any(
             target_os = "freebsd",
             solarish,
             target_os = "linux",
-            target_os = "netbsd"
+            target_os = "netbsd",
+            target_os = "managarm"
         ),
         feature = "time",
         feature = "signal"
@@ -87,7 +88,7 @@ pub(crate) mod timer {
         Interval(TimeSpec),
     }
 
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     bitflags! {
         /// Flags that are used for arming the timer.
         #[derive(Copy, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
diff --git a/src/time.rs b/src/time.rs
index 195df71..63eb186 100644
--- a/src/time.rs
+++ b/src/time.rs
@@ -1,6 +1,6 @@
 //! Sleep, query system clocks, and set system clock
 use crate::sys::time::TimeSpec;
-#[cfg(any(freebsdlike, linux_android, target_os = "emscripten"))]
+#[cfg(any(freebsdlike, linux_android, target_os = "emscripten", target_os = "managarm"))]
 #[cfg(feature = "process")]
 use crate::unistd::Pid;
 use crate::{Errno, Result};
@@ -56,19 +56,19 @@ impl ClockId {
         self.0
     }
 
-    #[cfg(any(linux_android, target_os = "emscripten", target_os = "fuchsia"))]
+    #[cfg(any(linux_android, target_os = "emscripten", target_os = "fuchsia", target_os = "managarm"))]
     /// Starts at zero when the kernel boots and increments monotonically in SI seconds while the
     /// machine is running.
     pub const CLOCK_BOOTTIME: ClockId = ClockId(libc::CLOCK_BOOTTIME);
     /// Like [`CLOCK_BOOTTIME`](ClockId::CLOCK_BOOTTIME), but will wake the system if it is
     /// suspended..
-    #[cfg(any(linux_android, target_os = "emscripten", target_os = "fuchsia"))]
+    #[cfg(any(linux_android, target_os = "emscripten", target_os = "fuchsia", target_os = "managarm"))]
     pub const CLOCK_BOOTTIME_ALARM: ClockId =
         ClockId(libc::CLOCK_BOOTTIME_ALARM);
     /// Increments in SI seconds.
     pub const CLOCK_MONOTONIC: ClockId = ClockId(libc::CLOCK_MONOTONIC);
     /// Like [`CLOCK_MONOTONIC`](ClockId::CLOCK_MONOTONIC), but optimized for execution time at the expense of accuracy.
-    #[cfg(any(linux_android, target_os = "emscripten", target_os = "fuchsia"))]
+    #[cfg(any(linux_android, target_os = "emscripten", target_os = "fuchsia", target_os = "managarm"))]
     pub const CLOCK_MONOTONIC_COARSE: ClockId =
         ClockId(libc::CLOCK_MONOTONIC_COARSE);
     #[cfg(freebsdlike)]
@@ -81,7 +81,7 @@ impl ClockId {
         ClockId(libc::CLOCK_MONOTONIC_PRECISE);
     /// Similar to [`CLOCK_MONOTONIC`](ClockId::CLOCK_MONOTONIC), but provides access to a raw
     /// hardware-based time that is not subject to NTP adjustments.
-    #[cfg(any(linux_android, target_os = "emscripten", target_os = "fuchsia"))]
+    #[cfg(any(linux_android, target_os = "emscripten", target_os = "fuchsia", target_os = "managarm"))]
     pub const CLOCK_MONOTONIC_RAW: ClockId = ClockId(libc::CLOCK_MONOTONIC_RAW);
     #[cfg(any(
         linux_android,
@@ -90,6 +90,7 @@ impl ClockId {
         target_os = "emscripten",
         target_os = "fuchsia",
         target_os = "redox",
+        target_os = "managarm"
     ))]
     /// Returns the execution time of the calling process.
     pub const CLOCK_PROCESS_CPUTIME_ID: ClockId =
@@ -100,11 +101,11 @@ impl ClockId {
     /// Increments as a wall clock should.
     pub const CLOCK_REALTIME: ClockId = ClockId(libc::CLOCK_REALTIME);
     /// Like [`CLOCK_REALTIME`](ClockId::CLOCK_REALTIME), but not settable.
-    #[cfg(any(linux_android, target_os = "emscripten", target_os = "fuchsia"))]
+    #[cfg(any(linux_android, target_os = "emscripten", target_os = "fuchsia", target_os = "managarm"))]
     pub const CLOCK_REALTIME_ALARM: ClockId =
         ClockId(libc::CLOCK_REALTIME_ALARM);
     /// Like [`CLOCK_REALTIME`](ClockId::CLOCK_REALTIME), but optimized for execution time at the expense of accuracy.
-    #[cfg(any(linux_android, target_os = "emscripten", target_os = "fuchsia"))]
+    #[cfg(any(linux_android, target_os = "emscripten", target_os = "fuchsia", target_os = "managarm"))]
     pub const CLOCK_REALTIME_COARSE: ClockId =
         ClockId(libc::CLOCK_REALTIME_COARSE);
     #[cfg(freebsdlike)]
@@ -122,6 +123,7 @@ impl ClockId {
     #[cfg(any(
         target_os = "emscripten",
         target_os = "fuchsia",
+        target_os = "managarm"
         all(target_os = "linux", target_env = "musl")
     ))]
     pub const CLOCK_SGI_CYCLE: ClockId = ClockId(libc::CLOCK_SGI_CYCLE);
@@ -132,6 +134,7 @@ impl ClockId {
     pub const CLOCK_TAI: ClockId = ClockId(libc::CLOCK_TAI);
     #[cfg(any(
         linux_android,
+        target_os = "managarm"
         apple_targets,
         freebsdlike,
         target_os = "emscripten",
@@ -214,7 +217,7 @@ pub fn clock_settime(clock_id: ClockId, timespec: TimeSpec) -> Result<()> {
 
 /// Get the clock id of the specified process id, (see
 /// [clock_getcpuclockid(3)](https://pubs.opengroup.org/onlinepubs/009695399/functions/clock_getcpuclockid.html)).
-#[cfg(any(freebsdlike, linux_android, target_os = "emscripten"))]
+#[cfg(any(freebsdlike, linux_android, target_os = "emscripten", target_os = "managarm"))]
 #[cfg(feature = "process")]
 #[cfg_attr(docsrs, doc(cfg(feature = "process")))]
 pub fn clock_getcpuclockid(pid: Pid) -> Result<ClockId> {
@@ -235,7 +238,8 @@ pub fn clock_getcpuclockid(pid: Pid) -> Result<ClockId> {
     freebsdlike,
     target_os = "netbsd",
     target_os = "hurd",
-    target_os = "aix"
+    target_os = "aix",
+    target_os = "managarm"
 ))]
 libc_bitflags! {
     /// Flags that are used for arming the timer.
@@ -261,7 +265,8 @@ libc_bitflags! {
     freebsdlike,
     target_os = "netbsd",
     target_os = "hurd",
-    target_os = "aix"
+    target_os = "aix",
+    target_os = "managarm"
 ))]
 pub fn clock_nanosleep(
     clock_id: ClockId,
diff --git a/src/unistd.rs b/src/unistd.rs
index 58ede6e..3c1dfce 100644
--- a/src/unistd.rs
+++ b/src/unistd.rs
@@ -4,7 +4,7 @@ use crate::errno::Errno;
 
 #[cfg(any(
     all(feature = "fs", not(target_os = "redox")),
-    all(feature = "process", linux_android)
+    all(feature = "process", any(linux_android, target_os = "managarm"))
 ))]
 use crate::fcntl::at_rawfd;
 #[cfg(not(target_os = "redox"))]
@@ -21,6 +21,7 @@ use crate::fcntl::AtFlags;
     target_os = "fuchsia",
     target_os = "hurd",
     target_os = "redox",
+    target_os = "managarm"
 ))]
 use crate::fcntl::OFlag;
 #[cfg(all(feature = "fs", bsd))]
@@ -453,7 +454,8 @@ pub fn dup2(oldfd: RawFd, newfd: RawFd) -> Result<RawFd> {
     target_os = "freebsd",
     target_os = "fuchsia",
     target_os = "hurd",
-    target_os = "linux"
+    target_os = "linux",
+    target_os = "managarm"
 ))]
 pub fn dup3(oldfd: RawFd, newfd: RawFd, flags: OFlag) -> Result<RawFd> {
     let res = unsafe { libc::dup3(oldfd, newfd, flags.bits()) };
@@ -882,7 +884,7 @@ pub fn execvp<S: AsRef<CStr>>(
 /// This functions like a combination of `execvp(2)` and `execve(2)` to pass an
 /// environment and have a search path. See these two for additional
 /// information.
-#[cfg(any(target_os = "haiku", target_os = "hurd", target_os = "linux", target_os = "openbsd"))]
+#[cfg(any(target_os = "haiku", target_os = "hurd", target_os = "linux", target_os = "openbsd", target_os = "managarm"))]
 pub fn execvpe<SA: AsRef<CStr>, SE: AsRef<CStr>>(
     filename: &CStr,
     args: &[SA],
@@ -908,7 +910,7 @@ pub fn execvpe<SA: AsRef<CStr>, SE: AsRef<CStr>>(
 ///
 /// This function is similar to `execve`, except that the program to be executed
 /// is referenced as a file descriptor instead of a path.
-#[cfg(any(linux_android, freebsdlike, target_os = "hurd"))]
+#[cfg(any(linux_android, freebsdlike, target_os = "hurd", target_os = "managarm"))]
 #[inline]
 pub fn fexecve<SA: AsRef<CStr>, SE: AsRef<CStr>>(
     fd: RawFd,
@@ -989,7 +991,8 @@ pub fn execveat<SA: AsRef<CStr>, SE: AsRef<CStr>>(
         linux_android,
         freebsdlike,
         solarish,
-        netbsdlike
+        netbsdlike,
+        target_os = "managarm"
 ))]
 pub fn daemon(nochdir: bool, noclose: bool) -> Result<()> {
     let res = unsafe { libc::daemon(nochdir as c_int, noclose as c_int) };
@@ -1137,6 +1140,7 @@ pub enum Whence {
         freebsdlike,
         solarish,
         target_os = "linux",
+        target_os = "managarm"
     ))]
     SeekData = libc::SEEK_DATA,
     /// Specify an offset relative to the next hole in the file greater than
@@ -1148,6 +1152,7 @@ pub enum Whence {
         freebsdlike,
         solarish,
         target_os = "linux",
+        target_os = "managarm"
     ))]
     SeekHole = libc::SEEK_HOLE,
 }
@@ -1218,6 +1223,7 @@ feature! {
     target_os = "hurd",
     target_os = "redox",
     netbsdlike,
+    target_os = "managarm"
 ))]
 pub fn pipe2(flags: OFlag) -> Result<(OwnedFd, OwnedFd)> {
     let mut fds = mem::MaybeUninit::<[OwnedFd; 2]>::uninit();
@@ -1377,7 +1383,7 @@ pub fn chroot<P: ?Sized + NixPath>(path: &P) -> Result<()> {
 /// Commit filesystem caches to disk
 ///
 /// See also [sync(2)](https://pubs.opengroup.org/onlinepubs/9699919799/functions/sync.html)
-#[cfg(any(bsd, linux_android, solarish, target_os = "haiku", target_os = "aix", target_os = "hurd"))]
+#[cfg(any(bsd, linux_android, solarish, target_os = "haiku", target_os = "aix", target_os = "hurd", target_os = "managarm"))]
 pub fn sync() {
     unsafe { libc::sync() };
 }
@@ -1386,7 +1392,7 @@ pub fn sync() {
 /// descriptor `fd` to disk
 ///
 /// See also [syncfs(2)](https://man7.org/linux/man-pages/man2/sync.2.html)
-#[cfg(any(linux_android, target_os = "hurd"))]
+#[cfg(any(linux_android, target_os = "hurd", target_os = "managarm"))]
 pub fn syncfs(fd: RawFd) -> Result<()> {
     let res = unsafe { libc::syncfs(fd) };
 
@@ -1417,6 +1423,7 @@ pub fn fsync(fd: RawFd) -> Result<()> {
     target_os = "fuchsia",
     target_os = "aix",
     target_os = "hurd",
+    target_os = "managarm"
 ))]
 #[inline]
 pub fn fdatasync(fd: RawFd) -> Result<()> {
@@ -2032,7 +2039,8 @@ pub enum PathconfVar {
         freebsdlike,
         netbsdlike,
         target_os = "linux",
-        target_os = "redox"
+        target_os = "redox",
+        target_os = "managarm"
     ))]
     /// Minimum number of bits needed to represent, as a signed integer value,
     /// the maximum size of a regular file allowed in the specified directory.
@@ -2074,7 +2082,7 @@ pub enum PathconfVar {
         solarish,
         netbsdlike,
         target_os = "dragonfly",
-        target_os = "redox",
+        target_os = "redox"
     ))]
     /// Symbolic links can be created.
     POSIX2_SYMLINKS = libc::_PC_2_SYMLINKS,
@@ -2125,6 +2133,7 @@ pub enum PathconfVar {
         solarish,
         netbsdlike,
         target_os = "redox",
+        target_os = "managarm"
     ))]
     /// Maximum number of bytes in a symbolic link.
     SYMLINK_MAX = libc::_PC_SYMLINK_MAX,
@@ -2143,7 +2152,7 @@ pub enum PathconfVar {
         freebsdlike,
         solarish,
         target_os = "openbsd",
-        target_os = "redox",
+        target_os = "redox"
     ))]
     /// Asynchronous input or output operations may be performed for the
     /// associated file.
@@ -2153,7 +2162,7 @@ pub enum PathconfVar {
         freebsdlike,
         solarish,
         target_os = "openbsd",
-        target_os = "redox",
+        target_os = "redox"
     ))]
     /// Prioritized input or output operations may be performed for the
     /// associated file.
@@ -2163,7 +2172,7 @@ pub enum PathconfVar {
         freebsdlike,
         solarish,
         netbsdlike,
-        target_os = "redox",
+        target_os = "redox"
     ))]
     /// Synchronized input or output operations may be performed for the
     /// associated file.
@@ -2281,7 +2290,8 @@ pub enum SysconfVar {
         linux_android,
         freebsdlike,
         apple_targets,
-        target_os = "openbsd"
+        target_os = "openbsd",
+        target_os = "managarm"
     ))]
     /// The maximum amount by which a process can decrease its asynchronous I/O
     /// priority level from its own scheduling priority.
@@ -2356,20 +2366,21 @@ pub enum SysconfVar {
         freebsdlike,
         apple_targets,
         target_os = "linux",
-        target_os = "openbsd"
+        target_os = "openbsd",
+        target_os = "managarm"
     ))]
     /// The implementation supports the Advisory Information option.
     _POSIX_ADVISORY_INFO = libc::_SC_ADVISORY_INFO,
-    #[cfg(any(bsd, solarish, target_os = "linux"))]
+    #[cfg(any(bsd, solarish, target_os = "linux", target_os = "managarm"))]
     /// The implementation supports barriers.
     _POSIX_BARRIERS = libc::_SC_BARRIERS,
     /// The implementation supports asynchronous input and output.
     #[cfg(not(any(target_os = "redox", target_os = "haiku")))]
     _POSIX_ASYNCHRONOUS_IO = libc::_SC_ASYNCHRONOUS_IO,
-    #[cfg(any(bsd, solarish, target_os = "linux"))]
+    #[cfg(any(bsd, solarish, target_os = "linux", target_os = "managarm"))]
     /// The implementation supports clock selection.
     _POSIX_CLOCK_SELECTION = libc::_SC_CLOCK_SELECTION,
-    #[cfg(any(bsd, solarish, target_os = "linux"))]
+    #[cfg(any(bsd, solarish, target_os = "linux", target_os = "managarm"))]
     /// The implementation supports the Process CPU-Time Clocks option.
     _POSIX_CPUTIME = libc::_SC_CPUTIME,
     /// The implementation supports the File Synchronization option.
@@ -2380,7 +2391,7 @@ pub enum SysconfVar {
         apple_targets,
         solarish,
         target_os = "linux",
-        target_os = "openbsd",
+        target_os = "openbsd"
     ))]
     /// The implementation supports the IPv6 option.
     _POSIX_IPV6 = libc::_SC_IPV6,
@@ -2411,6 +2422,7 @@ pub enum SysconfVar {
         solarish,
         apple_targets,
         target_os = "openbsd",
+        target_os = "managarm"
     ))]
     /// The implementation supports the Prioritized Input and Output option.
     _POSIX_PRIORITIZED_IO = libc::_SC_PRIORITIZED_IO,
@@ -2422,14 +2434,14 @@ pub enum SysconfVar {
         solarish,
         apple_targets,
         target_os = "linux",
-        target_os = "openbsd",
+        target_os = "openbsd"
     ))]
     /// The implementation supports the Raw Sockets option.
     _POSIX_RAW_SOCKETS = libc::_SC_RAW_SOCKETS,
     #[cfg(any(
         bsd,
         solarish,
-        target_os = "linux",
+        target_os = "linux"
     ))]
     /// The implementation supports read-write locks.
     _POSIX_READER_WRITER_LOCKS = libc::_SC_READER_WRITER_LOCKS,
@@ -2437,7 +2449,8 @@ pub enum SysconfVar {
         linux_android,
         freebsdlike,
         apple_targets,
-        target_os = "openbsd"
+        target_os = "openbsd",
+        target_os = "managarm"
     ))]
     /// The implementation supports realtime signals.
     _POSIX_REALTIME_SIGNALS = libc::_SC_REALTIME_SIGNALS,
@@ -2445,6 +2458,7 @@ pub enum SysconfVar {
         bsd,
         solarish,
         target_os = "linux",
+        target_os = "managarm"
     ))]
     /// The implementation supports the Regular Expression Handling option.
     _POSIX_REGEXP = libc::_SC_REGEXP,
@@ -2457,20 +2471,21 @@ pub enum SysconfVar {
     /// The implementation supports the Shared Memory Objects option.
     #[cfg(not(any(target_os = "redox", target_os = "haiku")))]
     _POSIX_SHARED_MEMORY_OBJECTS = libc::_SC_SHARED_MEMORY_OBJECTS,
-    #[cfg(any(bsd, target_os = "linux",))]
+    #[cfg(any(bsd, target_os = "linux", target_os = "managarm"))]
     /// The implementation supports the POSIX shell.
     _POSIX_SHELL = libc::_SC_SHELL,
-    #[cfg(any(bsd, target_os = "linux",))]
+    #[cfg(any(bsd, target_os = "linux", target_os = "managarm"))]
     /// The implementation supports the Spawn option.
     _POSIX_SPAWN = libc::_SC_SPAWN,
-    #[cfg(any(bsd, target_os = "linux",))]
+    #[cfg(any(bsd, target_os = "linux", target_os = "managarm"))]
     /// The implementation supports spin locks.
     _POSIX_SPIN_LOCKS = libc::_SC_SPIN_LOCKS,
     #[cfg(any(
         freebsdlike,
         apple_targets,
         target_os = "linux",
-        target_os = "openbsd"
+        target_os = "openbsd",
+        target_os = "managarm"
     ))]
     /// The implementation supports the Process Sporadic Server option.
     _POSIX_SPORADIC_SERVER = libc::_SC_SPORADIC_SERVER,
@@ -2495,6 +2510,7 @@ pub enum SysconfVar {
         apple_targets,
         target_os = "linux",
         netbsdlike,
+        target_os = "managarm"
     ))]
     /// The implementation supports the Thread CPU-Time Clocks option.
     _POSIX_THREAD_CPUTIME = libc::_SC_THREAD_CPUTIME,
@@ -2508,7 +2524,7 @@ pub enum SysconfVar {
     /// The implementation supports the Thread Execution Scheduling option.
     #[cfg(not(target_os = "redox"))]
     _POSIX_THREAD_PRIORITY_SCHEDULING = libc::_SC_THREAD_PRIORITY_SCHEDULING,
-    #[cfg(any(bsd, target_os = "linux"))]
+    #[cfg(any(bsd, target_os = "linux", target_os = "managarm"))]
     /// The implementation supports the Thread Process-Shared Synchronization
     /// option.
     _POSIX_THREAD_PROCESS_SHARED = libc::_SC_THREAD_PROCESS_SHARED,
@@ -2533,7 +2549,8 @@ pub enum SysconfVar {
         freebsdlike,
         apple_targets,
         target_os = "linux",
-        target_os = "openbsd"
+        target_os = "openbsd",
+        target_os = "managarm"
     ))]
     /// The implementation supports the Thread Sporadic Server option.
     _POSIX_THREAD_SPORADIC_SERVER = libc::_SC_THREAD_SPORADIC_SERVER,
@@ -2544,7 +2561,8 @@ pub enum SysconfVar {
         freebsdlike,
         apple_targets,
         target_os = "linux",
-        target_os = "openbsd"
+        target_os = "openbsd",
+        target_os = "managarm"
     ))]
     /// The implementation supports timeouts.
     _POSIX_TIMEOUTS = libc::_SC_TIMEOUTS,
@@ -2555,7 +2573,8 @@ pub enum SysconfVar {
         freebsdlike,
         apple_targets,
         target_os = "linux",
-        target_os = "openbsd"
+        target_os = "openbsd",
+        target_os = "managarm"
     ))]
     /// The implementation supports the Trace option.
     _POSIX_TRACE = libc::_SC_TRACE,
@@ -2563,7 +2582,8 @@ pub enum SysconfVar {
         freebsdlike,
         apple_targets,
         target_os = "linux",
-        target_os = "openbsd"
+        target_os = "openbsd",
+        target_os = "managarm"
     ))]
     /// The implementation supports the Trace Event Filter option.
     _POSIX_TRACE_EVENT_FILTER = libc::_SC_TRACE_EVENT_FILTER,
@@ -2578,7 +2598,8 @@ pub enum SysconfVar {
         freebsdlike,
         apple_targets,
         target_os = "linux",
-        target_os = "openbsd"
+        target_os = "openbsd",
+        target_os = "managarm"
     ))]
     /// The implementation supports the Trace Inherit option.
     _POSIX_TRACE_INHERIT = libc::_SC_TRACE_INHERIT,
@@ -2586,7 +2607,8 @@ pub enum SysconfVar {
         freebsdlike,
         apple_targets,
         target_os = "linux",
-        target_os = "openbsd"
+        target_os = "openbsd",
+        target_os = "managarm"
     ))]
     /// The implementation supports the Trace Log option.
     _POSIX_TRACE_LOG = libc::_SC_TRACE_LOG,
@@ -2616,7 +2638,8 @@ pub enum SysconfVar {
         freebsdlike,
         apple_targets,
         target_os = "linux",
-        target_os = "openbsd"
+        target_os = "openbsd",
+        target_os = "managarm"
     ))]
     /// The implementation supports the Typed Memory Objects option.
     _POSIX_TYPED_MEMORY_OBJECTS = libc::_SC_TYPED_MEMORY_OBJECTS,
@@ -2624,20 +2647,20 @@ pub enum SysconfVar {
     /// to which the implementation conforms. For implementations conforming to
     /// POSIX.1-2008, the value shall be 200809L.
     _POSIX_VERSION = libc::_SC_VERSION,
-    #[cfg(any(bsd, target_os = "linux"))]
+    #[cfg(any(bsd, target_os = "linux", target_os = "managarm"))]
     /// The implementation provides a C-language compilation environment with
     /// 32-bit `int`, `long`, `pointer`, and `off_t` types.
     _POSIX_V6_ILP32_OFF32 = libc::_SC_V6_ILP32_OFF32,
-    #[cfg(any(bsd, target_os = "linux"))]
+    #[cfg(any(bsd, target_os = "linux", target_os = "managarm"))]
     /// The implementation provides a C-language compilation environment with
     /// 32-bit `int`, `long`, and pointer types and an `off_t` type using at
     /// least 64 bits.
     _POSIX_V6_ILP32_OFFBIG = libc::_SC_V6_ILP32_OFFBIG,
-    #[cfg(any(bsd, target_os = "linux"))]
+    #[cfg(any(bsd, target_os = "linux", target_os = "managarm"))]
     /// The implementation provides a C-language compilation environment with
     /// 32-bit `int` and 64-bit `long`, `pointer`, and `off_t` types.
     _POSIX_V6_LP64_OFF64 = libc::_SC_V6_LP64_OFF64,
-    #[cfg(any(bsd, target_os = "linux"))]
+    #[cfg(any(bsd, target_os = "linux", target_os = "managarm"))]
     /// The implementation provides a C-language compilation environment with an
     /// `int` type using at least 32 bits and `long`, pointer, and `off_t` types
     /// using at least 64 bits.
@@ -2661,23 +2684,23 @@ pub enum SysconfVar {
     /// utility.
     #[cfg(not(any(target_os = "redox", target_os = "haiku")))]
     _POSIX2_LOCALEDEF = libc::_SC_2_LOCALEDEF,
-    #[cfg(any(bsd, target_os = "linux"))]
+    #[cfg(any(bsd, target_os = "linux", target_os = "managarm"))]
     /// The implementation supports the Batch Environment Services and Utilities
     /// option.
     _POSIX2_PBS = libc::_SC_2_PBS,
-    #[cfg(any(bsd, target_os = "linux"))]
+    #[cfg(any(bsd, target_os = "linux", target_os = "managarm"))]
     /// The implementation supports the Batch Accounting option.
     _POSIX2_PBS_ACCOUNTING = libc::_SC_2_PBS_ACCOUNTING,
-    #[cfg(any(bsd, target_os = "linux"))]
+    #[cfg(any(bsd, target_os = "linux", target_os = "managarm"))]
     /// The implementation supports the Batch Checkpoint/Restart option.
     _POSIX2_PBS_CHECKPOINT = libc::_SC_2_PBS_CHECKPOINT,
-    #[cfg(any(bsd, target_os = "linux"))]
+    #[cfg(any(bsd, target_os = "linux", target_os = "managarm"))]
     /// The implementation supports the Locate Batch Job Request option.
     _POSIX2_PBS_LOCATE = libc::_SC_2_PBS_LOCATE,
-    #[cfg(any(bsd, target_os = "linux"))]
+    #[cfg(any(bsd, target_os = "linux", target_os = "managarm"))]
     /// The implementation supports the Batch Job Message Request option.
     _POSIX2_PBS_MESSAGE = libc::_SC_2_PBS_MESSAGE,
-    #[cfg(any(bsd, target_os = "linux"))]
+    #[cfg(any(bsd, target_os = "linux", target_os = "managarm"))]
     /// The implementation supports the Track Batch Job Request option.
     _POSIX2_PBS_TRACK = libc::_SC_2_PBS_TRACK,
     /// The implementation supports the Software Development Utilities option.
@@ -2717,7 +2740,8 @@ pub enum SysconfVar {
         linux_android,
         freebsdlike,
         apple_targets,
-        target_os = "openbsd"
+        target_os = "openbsd",
+        target_os = "managarm"
     ))]
     RTSIG_MAX = libc::_SC_RTSIG_MAX,
     /// Maximum number of semaphores that a process may have.
@@ -2728,7 +2752,8 @@ pub enum SysconfVar {
         linux_android,
         freebsdlike,
         apple_targets,
-        target_os = "openbsd"
+        target_os = "openbsd",
+        target_os = "managarm"
     ))]
     SEM_VALUE_MAX = libc::_SC_SEM_VALUE_MAX,
     /// Maximum number of queued signals that a process may send and have pending at the
@@ -2737,14 +2762,15 @@ pub enum SysconfVar {
         linux_android,
         freebsdlike,
         apple_targets,
-        target_os = "openbsd"
+        target_os = "openbsd",
+        target_os = "managarm"
     ))]
     SIGQUEUE_MAX = libc::_SC_SIGQUEUE_MAX,
     /// The minimum maximum number of streams that a process may have open at any one time.
     STREAM_MAX = libc::_SC_STREAM_MAX,
     /// Maximum number of symbolic links that can be reliably traversed in the resolution of a
     /// pathname in the absence of a loop.
-    #[cfg(any(bsd, target_os = "linux"))]
+    #[cfg(any(bsd, target_os = "linux", target_os = "managarm"))]
     SYMLOOP_MAX = libc::_SC_SYMLOOP_MAX,
     /// Maximum number of timers per process supported.
     #[cfg(not(target_os = "redox"))]
@@ -2757,7 +2783,8 @@ pub enum SysconfVar {
         linux_android,
         freebsdlike,
         apple_targets,
-        target_os = "openbsd"
+        target_os = "openbsd",
+        target_os = "managarm"
     ))]
     /// The implementation supports the X/Open Encryption Option Group.
     _XOPEN_CRYPT = libc::_SC_XOPEN_CRYPT,
@@ -2765,7 +2792,8 @@ pub enum SysconfVar {
         linux_android,
         freebsdlike,
         apple_targets,
-        target_os = "openbsd"
+        target_os = "openbsd",
+        target_os = "managarm"
     ))]
     /// The implementation supports the Issue 4, Version 2 Enhanced
     /// Internationalization Option Group.
@@ -2774,7 +2802,8 @@ pub enum SysconfVar {
         linux_android,
         freebsdlike,
         apple_targets,
-        target_os = "openbsd"
+        target_os = "openbsd",
+        target_os = "managarm"
     ))]
     /// The implementation supports the XOpen Legacy Option group.
     ///
@@ -2784,7 +2813,8 @@ pub enum SysconfVar {
         linux_android,
         freebsdlike,
         apple_targets,
-        target_os = "openbsd"
+        target_os = "openbsd",
+        target_os = "managarm"
     ))]
     /// The implementation supports the X/Open Realtime Option Group.
     _XOPEN_REALTIME = libc::_SC_XOPEN_REALTIME,
@@ -2792,7 +2822,8 @@ pub enum SysconfVar {
         linux_android,
         freebsdlike,
         apple_targets,
-        target_os = "openbsd"
+        target_os = "openbsd",
+        target_os = "managarm"
     ))]
     /// The implementation supports the X/Open Realtime Threads Option Group.
     _XOPEN_REALTIME_THREADS = libc::_SC_XOPEN_REALTIME_THREADS,
@@ -2812,7 +2843,8 @@ pub enum SysconfVar {
         linux_android,
         freebsdlike,
         apple_targets,
-        target_os = "openbsd"
+        target_os = "openbsd",
+        target_os = "managarm"
     ))]
     /// The implementation supports the XSI option
     _XOPEN_UNIX = libc::_SC_XOPEN_UNIX,
@@ -2820,23 +2852,24 @@ pub enum SysconfVar {
         linux_android,
         freebsdlike,
         apple_targets,
-        target_os = "openbsd"
+        target_os = "openbsd",
+        target_os = "managarm"
     ))]
     /// Integer value indicating version of the X/Open Portability Guide to
     /// which the implementation conforms.
     _XOPEN_VERSION = libc::_SC_XOPEN_VERSION,
     /// The number of pages of physical memory. Note that it is possible for
     /// the product of this value to overflow.
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     _PHYS_PAGES = libc::_SC_PHYS_PAGES,
     /// The number of currently available pages of physical memory.
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     _AVPHYS_PAGES = libc::_SC_AVPHYS_PAGES,
     /// The number of processors configured.
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     _NPROCESSORS_CONF = libc::_SC_NPROCESSORS_CONF,
     /// The number of processors currently online (available).
-    #[cfg(linux_android)]
+    #[cfg(any(linux_android, target_os = "managarm"))]
     _NPROCESSORS_ONLN = libc::_SC_NPROCESSORS_ONLN,
 }
 
@@ -3190,6 +3223,7 @@ pub struct User {
         target_os = "fuchsia",
         target_os = "haiku",
         target_os = "hurd",
+        target_os = "managarm"
     )))]
     pub class: CString,
     /// Last password change
@@ -3200,6 +3234,7 @@ pub struct User {
         target_os = "fuchsia",
         target_os = "haiku",
         target_os = "hurd",
+        target_os = "managarm"
     )))]
     pub change: libc::time_t,
     /// Expiration time of account
@@ -3210,6 +3245,7 @@ pub struct User {
         target_os = "fuchsia",
         target_os = "haiku",
         target_os = "hurd",
+        target_os = "managarm"
     )))]
     pub expire: libc::time_t,
 }
@@ -3263,6 +3299,7 @@ impl From<&libc::passwd> for User {
                     target_os = "fuchsia",
                     target_os = "haiku",
                     target_os = "hurd",
+                    target_os = "managarm"
                 )))]
                 class: CString::new(CStr::from_ptr(pw.pw_class).to_bytes())
                     .unwrap(),
@@ -3273,6 +3310,7 @@ impl From<&libc::passwd> for User {
                     target_os = "fuchsia",
                     target_os = "haiku",
                     target_os = "hurd",
+                    target_os = "managarm"
                 )))]
                 change: pw.pw_change,
                 #[cfg(not(any(
@@ -3282,6 +3320,7 @@ impl From<&libc::passwd> for User {
                     target_os = "fuchsia",
                     target_os = "haiku",
                     target_os = "hurd",
+                    target_os = "managarm"
                 )))]
                 expire: pw.pw_expire,
             }
@@ -3323,6 +3362,7 @@ impl From<User> for libc::passwd {
                 target_os = "fuchsia",
                 target_os = "haiku",
                 target_os = "hurd",
+                target_os = "managarm"
             )))]
             pw_class: u.class.into_raw(),
             #[cfg(not(any(
@@ -3332,6 +3372,7 @@ impl From<User> for libc::passwd {
                 target_os = "fuchsia",
                 target_os = "haiku",
                 target_os = "hurd",
+                target_os = "managarm"
             )))]
             pw_change: u.change,
             #[cfg(not(any(
@@ -3341,6 +3382,7 @@ impl From<User> for libc::passwd {
                 target_os = "fuchsia",
                 target_os = "haiku",
                 target_os = "hurd",
+                target_os = "managarm"
             )))]
             pw_expire: u.expire,
             #[cfg(solarish)]
-- 
2.47.2

