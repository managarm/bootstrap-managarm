From 6427ae0de05b82e419e328533ccc1af87f16c621 Mon Sep 17 00:00:00 2001
From: no92 <no92.mail@gmail.com>
Date: Mon, 12 Feb 2024 00:32:53 +0100
Subject: [PATCH 2/3] Add managarm support

---
 Cargo.toml                                  |   3 +
 build.rs                                    |  12 +-
 src/unix/linux_like/managarm/aarch64/mod.rs |  81 +++++++++++++
 src/unix/linux_like/managarm/riscv64/mod.rs | 104 ++++++++++++++++
 src/unix/linux_like/managarm/x86_64/mod.rs  | 124 ++++++++++++++++++++
 src/unix/linux_like/mod.rs                  |   7 +-
 src/unix/mod.rs                             |   3 +-
 triagebot.toml                              |   2 +
 8 files changed, 332 insertions(+), 4 deletions(-)
 create mode 100644 src/unix/linux_like/managarm/aarch64/mod.rs
 create mode 100644 src/unix/linux_like/managarm/riscv64/mod.rs
 create mode 100644 src/unix/linux_like/managarm/x86_64/mod.rs

diff --git a/Cargo.toml b/Cargo.toml
index afeb07bc7..1d39c821e 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -24,6 +24,7 @@ targets = [
     "aarch64-unknown-hermit",
     "aarch64-unknown-linux-gnu",
     "aarch64-unknown-linux-musl",
+    "aarch64-unknown-managarm-mlibc",
     "aarch64-unknown-netbsd",
     "aarch64-unknown-openbsd",
     "aarch64-wrs-vxworks",
@@ -87,6 +88,7 @@ targets = [
     "riscv64gc-unknown-hermit",
     "riscv64gc-unknown-linux-gnu",
     "riscv64gc-unknown-linux-musl",
+    "riscv64gc-unknown-managarm-mlibc",
     "riscv64gc-unknown-none-elf",
     "riscv64imac-unknown-none-elf",
     "riscv64-wrs-vxworks",
@@ -121,6 +123,7 @@ targets = [
     "x86_64-unknown-linux-gnu",
     "x86_64-unknown-linux-gnux32",
     "x86_64-unknown-linux-musl",
+    "x86_64-unknown-managarm-mlibc",
     "x86_64-unknown-netbsd",
     "x86_64-unknown-openbsd",
     "x86_64-unknown-redox",
diff --git a/build.rs b/build.rs
index 070354f1e..a0ff4466d 100644
--- a/build.rs
+++ b/build.rs
@@ -32,12 +32,20 @@ const CHECK_CFG_EXTRA: &[(&str, &[&str])] = &[
     (
         "target_os",
         &[
-            "switch", "aix", "ohos", "hurd", "rtems", "visionos", "nuttx", "cygwin",
+            "switch", "aix", "ohos", "hurd", "rtems", "visionos", "nuttx", "cygwin", "managarm",
         ],
     ),
     (
         "target_env",
-        &["illumos", "wasi", "aix", "ohos", "nto71_iosock", "nto80"],
+        &[
+            "illumos",
+            "wasi",
+            "aix",
+            "ohos",
+            "nto71_iosock",
+            "nto80",
+            "mlibc",
+        ],
     ),
     (
         "target_arch",
diff --git a/src/unix/linux_like/managarm/aarch64/mod.rs b/src/unix/linux_like/managarm/aarch64/mod.rs
new file mode 100644
index 000000000..b92632cb7
--- /dev/null
+++ b/src/unix/linux_like/managarm/aarch64/mod.rs
@@ -0,0 +1,81 @@
+use crate::prelude::*;
+use crate::{off64_t, off_t};
+
+pub type nlink_t = c_uint;
+pub type blksize_t = c_int;
+
+s! {
+    pub struct stat {
+        pub st_dev: crate::dev_t,
+        pub st_ino: crate::ino_t,
+        pub st_mode: crate::mode_t,
+        pub st_nlink: crate::nlink_t,
+        pub st_uid: crate::uid_t,
+        pub st_gid: crate::gid_t,
+        pub st_rdev: crate::dev_t,
+        __pad1: crate::dev_t,
+        pub st_size: off_t,
+        pub st_blksize: crate::blksize_t,
+        __pad2: c_int,
+        pub st_blocks: crate::blkcnt_t,
+        pub st_atime: crate::time_t,
+        pub st_atime_nsec: c_long,
+        pub st_mtime: crate::time_t,
+        pub st_mtime_nsec: c_long,
+        pub st_ctime: crate::time_t,
+        pub st_ctime_nsec: c_long,
+        __unused: [c_int; 2],
+    }
+
+    pub struct stat64 {
+        pub st_dev: crate::dev_t,
+        pub st_ino: crate::ino_t,
+        pub st_mode: crate::mode_t,
+        pub st_nlink: crate::nlink_t,
+        pub st_uid: crate::uid_t,
+        pub st_gid: crate::gid_t,
+        pub st_rdev: crate::dev_t,
+        __pad1: crate::dev_t,
+        pub st_size: off64_t,
+        pub st_blksize: crate::blksize_t,
+        __pad2: c_int,
+        pub st_blocks: crate::blkcnt64_t,
+        pub st_atime: crate::time_t,
+        pub st_atime_nsec: c_long,
+        pub st_mtime: crate::time_t,
+        pub st_mtime_nsec: c_long,
+        pub st_ctime: crate::time_t,
+        pub st_ctime_nsec: c_long,
+        __unused: [c_int; 2],
+    }
+
+    pub struct ucontext_t {
+        pub uc_flags: c_ulong,
+        pub uc_link: *mut ucontext_t,
+        pub uc_stack: crate::stack_t,
+        pub uc_sigmask: crate::sigset_t,
+        pub uc_mcontext: mcontext_t,
+    }
+
+    #[repr(align(16))]
+    pub struct mcontext_t {
+        pub fault_address: c_ulonglong,
+        pub regs: [c_ulonglong; 31],
+        pub sp: c_ulonglong,
+        pub pc: c_ulonglong,
+        pub pstate: c_ulonglong,
+        __reserved: [u64; 512],
+    }
+}
+
+s_no_extra_traits! {
+    #[repr(align(16))]
+    pub struct max_align_t {
+        priv_: [f32; 8],
+    }
+}
+
+pub const O_DIRECTORY: c_int = 0x4000;
+pub const O_NOFOLLOW: c_int = 0x8000;
+pub const O_DIRECT: c_int = 0x10000;
+pub const O_LARGEFILE: c_int = 0x20000;
diff --git a/src/unix/linux_like/managarm/riscv64/mod.rs b/src/unix/linux_like/managarm/riscv64/mod.rs
new file mode 100644
index 000000000..ee31b8edb
--- /dev/null
+++ b/src/unix/linux_like/managarm/riscv64/mod.rs
@@ -0,0 +1,104 @@
+use crate::prelude::*;
+use crate::{off64_t, off_t};
+
+pub type nlink_t = c_uint;
+pub type blksize_t = c_int;
+
+s! {
+    pub struct stat {
+        pub st_dev: crate::dev_t,
+        pub st_ino: crate::ino_t,
+        pub st_mode: crate::mode_t,
+        pub st_nlink: crate::nlink_t,
+        pub st_uid: crate::uid_t,
+        pub st_gid: crate::gid_t,
+        pub st_rdev: crate::dev_t,
+        pub __pad1: crate::dev_t,
+        pub st_size: off_t,
+        pub st_blksize: crate::blksize_t,
+        pub __pad2: c_int,
+        pub st_blocks: crate::blkcnt_t,
+        pub st_atime: crate::time_t,
+        pub st_atime_nsec: c_long,
+        pub st_mtime: crate::time_t,
+        pub st_mtime_nsec: c_long,
+        pub st_ctime: crate::time_t,
+        pub st_ctime_nsec: c_long,
+        __unused: [c_int; 2],
+    }
+
+    pub struct stat64 {
+        pub st_dev: crate::dev_t,
+        pub st_ino: crate::ino64_t,
+        pub st_mode: crate::mode_t,
+        pub st_nlink: crate::nlink_t,
+        pub st_uid: crate::uid_t,
+        pub st_gid: crate::gid_t,
+        pub st_rdev: crate::dev_t,
+        pub __pad1: crate::dev_t,
+        pub st_size: off64_t,
+        pub st_blksize: crate::blksize_t,
+        pub __pad2: c_int,
+        pub st_blocks: crate::blkcnt_t,
+        pub st_atime: crate::time_t,
+        pub st_atime_nsec: c_long,
+        pub st_mtime: crate::time_t,
+        pub st_mtime_nsec: c_long,
+        pub st_ctime: crate::time_t,
+        pub st_ctime_nsec: c_long,
+        __unused: [c_int; 2],
+    }
+}
+
+s_no_extra_traits! {
+    pub struct ucontext_t {
+        pub __uc_flags: c_ulong,
+        pub uc_link: *mut ucontext_t,
+        pub uc_stack: crate::stack_t,
+        pub uc_sigmask: crate::sigset_t,
+        pub uc_mcontext: mcontext_t,
+    }
+
+    #[repr(align(16))]
+    pub struct mcontext_t {
+        pub __gregs: [c_ulong; 32],
+        pub __fpregs: __riscv_mc_fp_state,
+    }
+
+    pub union __riscv_mc_fp_state {
+        pub __f: __riscv_mc_f_ext_state,
+        pub __d: __riscv_mc_d_ext_state,
+        pub __q: __riscv_mc_q_ext_state,
+    }
+
+    pub struct __riscv_mc_f_ext_state {
+        pub __f: [c_uint; 32],
+        pub __fcsr: c_uint,
+    }
+
+    pub struct __riscv_mc_d_ext_state {
+        pub __f: [c_ulonglong; 32],
+        pub __fcsr: c_uint,
+    }
+
+    #[repr(align(16))]
+    pub struct __riscv_mc_q_ext_state {
+        pub __f: [c_ulonglong; 64],
+        pub __fcsr: c_uint,
+        pub __glibc_reserved: [c_uint; 3],
+    }
+}
+
+pub const NGREG: usize = 32;
+pub const REG_PC: usize = 0;
+pub const REG_RA: usize = 1;
+pub const REG_SP: usize = 2;
+pub const REG_TP: usize = 4;
+pub const REG_S0: usize = 8;
+pub const REG_A0: usize = 10;
+pub const REG_NARGS: usize = 8;
+
+pub const O_DIRECT: c_int = 0x4000;
+pub const O_LARGEFILE: c_int = 0x8000;
+pub const O_DIRECTORY: c_int = 0x10000;
+pub const O_NOFOLLOW: c_int = 0x20000;
diff --git a/src/unix/linux_like/managarm/x86_64/mod.rs b/src/unix/linux_like/managarm/x86_64/mod.rs
new file mode 100644
index 000000000..4fa64623d
--- /dev/null
+++ b/src/unix/linux_like/managarm/x86_64/mod.rs
@@ -0,0 +1,124 @@
+use crate::prelude::*;
+use crate::{greg_t, off_t};
+
+pub type nlink_t = c_ulong;
+pub type blksize_t = c_long;
+
+s! {
+    pub struct stat {
+        pub st_dev: crate::dev_t,
+        pub st_ino: crate::ino_t,
+        pub st_nlink: crate::nlink_t,
+        pub st_mode: crate::mode_t,
+        pub st_uid: crate::uid_t,
+        pub st_gid: crate::gid_t,
+        __pad0: c_int,
+        pub st_rdev: crate::dev_t,
+        pub st_size: off_t,
+        pub st_blksize: crate::blksize_t,
+        pub st_blocks: crate::blkcnt_t,
+        pub st_atime: crate::time_t,
+        pub st_atime_nsec: i64,
+        pub st_mtime: crate::time_t,
+        pub st_mtime_nsec: i64,
+        pub st_ctime: crate::time_t,
+        pub st_ctime_nsec: i64,
+        __unused: [i64; 3],
+    }
+
+    pub struct stat64 {
+        pub st_dev: crate::dev_t,
+        pub st_ino: crate::ino64_t,
+        pub st_nlink: crate::nlink_t,
+        pub st_mode: crate::mode_t,
+        pub st_uid: crate::uid_t,
+        pub st_gid: crate::gid_t,
+        __pad0: c_int,
+        pub st_rdev: crate::dev_t,
+        pub st_size: off_t,
+        pub st_blksize: crate::blksize_t,
+        pub st_blocks: crate::blkcnt64_t,
+        pub st_atime: crate::time_t,
+        pub st_atime_nsec: i64,
+        pub st_mtime: crate::time_t,
+        pub st_mtime_nsec: i64,
+        pub st_ctime: crate::time_t,
+        pub st_ctime_nsec: i64,
+        __reserved: [i64; 3],
+    }
+
+    pub struct _libc_fpxreg {
+        pub significand: [u16; 4],
+        pub exponent: u16,
+        __private: [u16; 3],
+    }
+
+    pub struct _libc_xmmreg {
+        pub element: [u32; 4],
+    }
+
+    pub struct _libc_fpstate {
+        pub cwd: u16,
+        pub swd: u16,
+        pub ftw: u16,
+        pub fop: u16,
+        pub rip: u64,
+        pub rdp: u64,
+        pub mxcsr: u32,
+        pub mxcr_mask: u32,
+        pub _st: [_libc_fpxreg; 8],
+        pub _xmm: [_libc_xmmreg; 16],
+        __private: [u64; 12],
+    }
+
+    pub struct mcontext_t {
+        pub gregs: [greg_t; 23],
+        pub fpregs: *mut _libc_fpstate,
+        __private: [u64; 8],
+    }
+
+    pub struct ucontext_t {
+        pub uc_flags: c_ulong,
+        pub uc_link: *mut ucontext_t,
+        pub uc_stack: crate::stack_t,
+        pub uc_mcontext: mcontext_t,
+        pub uc_sigmask: crate::sigset_t,
+    }
+}
+
+s_no_extra_traits! {
+    #[repr(align(16))]
+    pub struct max_align_t {
+        priv_: [f64; 4],
+    }
+}
+
+// offsets in mcontext_t.gregs from sys/ucontext.h
+pub const REG_R8: c_int = 0;
+pub const REG_R9: c_int = 1;
+pub const REG_R10: c_int = 2;
+pub const REG_R11: c_int = 3;
+pub const REG_R12: c_int = 4;
+pub const REG_R13: c_int = 5;
+pub const REG_R14: c_int = 6;
+pub const REG_R15: c_int = 7;
+pub const REG_RDI: c_int = 8;
+pub const REG_RSI: c_int = 9;
+pub const REG_RBP: c_int = 10;
+pub const REG_RBX: c_int = 11;
+pub const REG_RDX: c_int = 12;
+pub const REG_RAX: c_int = 13;
+pub const REG_RCX: c_int = 14;
+pub const REG_RSP: c_int = 15;
+pub const REG_RIP: c_int = 16;
+pub const REG_EFL: c_int = 17;
+pub const REG_CSGSFS: c_int = 18;
+pub const REG_ERR: c_int = 19;
+pub const REG_TRAPNO: c_int = 20;
+pub const REG_OLDMASK: c_int = 21;
+pub const REG_CR2: c_int = 22;
+
+pub const O_DIRECT: c_int = 0x4000;
+pub const O_LARGEFILE: c_int = 0x8000;
+pub const O_DIRECTORY: c_int = 0x10000;
+pub const O_NOFOLLOW: c_int = 0x20000;
diff --git a/src/unix/linux_like/mod.rs b/src/unix/linux_like/mod.rs
index b044caf10..da9f449a2 100644
--- a/src/unix/linux_like/mod.rs
+++ b/src/unix/linux_like/mod.rs
@@ -64,7 +64,7 @@ s! {
         pub ai_protocol: c_int,
         pub ai_addrlen: socklen_t,
 
-        #[cfg(any(target_os = "linux", target_os = "emscripten"))]
+        #[cfg(any(target_os = "linux", target_os = "emscripten", target_os = "managarm"))]
         pub ai_addr: *mut crate::sockaddr,
 
         pub ai_canonname: *mut c_char,
@@ -237,6 +237,7 @@ cfg_if! {
     if #[cfg(any(
         target_env = "gnu",
         target_os = "android",
+        target_os = "managarm",
         all(target_env = "musl", musl_v1_2_3)
     ))] {
         s! {
@@ -1670,6 +1671,7 @@ cfg_if! {
     if #[cfg(any(
         target_env = "gnu",
         target_os = "android",
+        target_os = "managarm",
         all(target_env = "musl", musl_v1_2_3)
     ))] {
         pub const AT_STATX_SYNC_TYPE: c_int = 0x6000;
@@ -2219,6 +2221,9 @@ cfg_if! {
     } else if #[cfg(target_os = "android")] {
         mod android;
         pub use self::android::*;
+    } else if #[cfg(target_os = "managarm")] {
+        mod managarm;
+        pub use self::managarm::*;
     } else {
         // Unknown target_os
     }
diff --git a/src/unix/mod.rs b/src/unix/mod.rs
index 941f2faa9..c777437dc 100644
--- a/src/unix/mod.rs
+++ b/src/unix/mod.rs
@@ -1836,7 +1836,8 @@ cfg_if! {
         target_os = "linux",
         target_os = "l4re",
         target_os = "android",
-        target_os = "emscripten"
+        target_os = "emscripten",
+        target_os = "managarm"
     ))] {
         mod linux_like;
         pub use self::linux_like::*;
diff --git a/triagebot.toml b/triagebot.toml
index 54d848f8f..d6a30b633 100644
--- a/triagebot.toml
+++ b/triagebot.toml
@@ -122,6 +122,7 @@ trigger_files = [
     "src/unix/linux_like/linux/gnu/b64/riscv64",
     "src/unix/linux_like/linux/musl/b32/riscv32",
     "src/unix/linux_like/linux/musl/b64/riscv64",
+    "src/unix/linux_like/managarm/riscv64",
     "src/vxworks/riscv32.rs",
     "src/vxworks/riscv64.rs",
 ]
@@ -169,6 +170,7 @@ trigger_files = [
     "src/unix/linux_like/linux/musl/b32/x86",
     "src/unix/linux_like/linux/musl/b64/x86_64",
     "src/unix/linux_like/linux/uclibc/x86_64",
+    "src/unix/linux_like/managarm/x86_64",
     "src/unix/nto/x86_64.rs",
     "src/unix/solarish/x86.rs",
     "src/unix/solarish/x86_64.rs",
-- 
2.51.0

