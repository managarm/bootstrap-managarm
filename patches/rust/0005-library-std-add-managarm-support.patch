From d915c2920359afb2e51e2861551340016df21325 Mon Sep 17 00:00:00 2001
From: Dennis Bonke <admin@dennisbonke.com>
Date: Fri, 1 Sep 2023 16:49:14 +0200
Subject: [PATCH 5/8] library/std: add managarm support

---
 library/std/build.rs                         |   1 +
 library/std/src/env.rs                       |   1 +
 library/std/src/os/managarm/fs.rs            | 148 +++++++++++++++++++
 library/std/src/os/managarm/mod.rs           |   6 +
 library/std/src/os/managarm/raw.rs           |  74 ++++++++++
 library/std/src/os/mod.rs                    |   2 +
 library/std/src/os/unix/mod.rs               |   2 +
 library/std/src/sys/args/unix.rs             |   1 +
 library/std/src/sys/env_consts.rs            |  11 ++
 library/std/src/sys/fd/unix.rs               |   2 +
 library/std/src/sys/fs/unix.rs               |  17 ++-
 library/std/src/sys/net/connection/socket.rs |   2 +-
 library/std/src/sys/pal/unix/os.rs           |   2 +
 library/std/src/sys/pal/unix/thread.rs       |   7 +-
 library/std/src/sys/random/mod.rs            |   1 +
 library/unwind/src/lib.rs                    |   4 +
 16 files changed, 276 insertions(+), 5 deletions(-)
 create mode 100644 library/std/src/os/managarm/fs.rs
 create mode 100644 library/std/src/os/managarm/mod.rs
 create mode 100644 library/std/src/os/managarm/raw.rs

diff --git a/library/std/build.rs b/library/std/build.rs
index ef695601..705a077d 100644
--- a/library/std/build.rs
+++ b/library/std/build.rs
@@ -52,6 +52,7 @@ fn main() {
         || target_os == "rtems"
         || target_os == "nuttx"
         || target_os == "cygwin"
+        || target_os == "managarm"
 
         // See src/bootstrap/src/core/build_steps/synthetic_targets.rs
         || env::var("RUSTC_BOOTSTRAP_SYNTHETIC_TARGET").is_ok()
diff --git a/library/std/src/env.rs b/library/std/src/env.rs
index 6d7d576b..efcd149f 100644
--- a/library/std/src/env.rs
+++ b/library/std/src/env.rs
@@ -1109,6 +1109,7 @@ pub mod consts {
     /// * `"vita"`
     /// * `"vxworks"`
     /// * `"xous"`
+    /// * `"managarm"`
     ///
     /// </details>
     #[stable(feature = "env", since = "1.0.0")]
diff --git a/library/std/src/os/managarm/fs.rs b/library/std/src/os/managarm/fs.rs
new file mode 100644
index 00000000..58205f11
--- /dev/null
+++ b/library/std/src/os/managarm/fs.rs
@@ -0,0 +1,148 @@
+#![stable(feature = "metadata_ext", since = "1.1.0")]
+
+use crate::fs::Metadata;
+use crate::sys_common::AsInner;
+
+#[allow(deprecated)]
+use crate::os::managarm::raw;
+
+/// OS-specific extensions to [`fs::Metadata`].
+///
+/// [`fs::Metadata`]: crate::fs::Metadata
+#[stable(feature = "metadata_ext", since = "1.1.0")]
+pub trait MetadataExt {
+    /// Gain a reference to the underlying `stat` structure which contains
+    /// the raw information returned by the OS.
+    ///
+    /// The contents of the returned `stat` are **not** consistent across
+    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the
+    /// cross-Unix abstractions contained within the raw stat.
+    #[stable(feature = "metadata_ext", since = "1.1.0")]
+    #[deprecated(
+        since = "1.8.0",
+        note = "deprecated in favor of the accessor \
+                  methods of this trait"
+    )]
+    #[allow(deprecated)]
+    fn as_raw_stat(&self) -> &raw::stat;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_dev(&self) -> u64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_ino(&self) -> u64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_mode(&self) -> u32;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_nlink(&self) -> u64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_uid(&self) -> u32;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_gid(&self) -> u32;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_rdev(&self) -> u64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_size(&self) -> u64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_atime(&self) -> i64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_atime_nsec(&self) -> i64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_mtime(&self) -> i64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_mtime_nsec(&self) -> i64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_ctime(&self) -> i64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_ctime_nsec(&self) -> i64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_blksize(&self) -> u64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_blocks(&self) -> u64;
+}
+
+#[stable(feature = "metadata_ext", since = "1.1.0")]
+impl MetadataExt for Metadata {
+    #[allow(deprecated)]
+    fn as_raw_stat(&self) -> &raw::stat {
+        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }
+    }
+
+    fn st_dev(&self) -> u64 {
+        self.as_inner().as_inner().st_dev as u64
+    }
+
+    fn st_ino(&self) -> u64 {
+        self.as_inner().as_inner().st_ino as u64
+    }
+
+    fn st_mode(&self) -> u32 {
+        self.as_inner().as_inner().st_mode as u32
+    }
+
+    fn st_nlink(&self) -> u64 {
+        self.as_inner().as_inner().st_nlink as u64
+    }
+
+    fn st_uid(&self) -> u32 {
+        self.as_inner().as_inner().st_uid as u32
+    }
+
+    fn st_gid(&self) -> u32 {
+        self.as_inner().as_inner().st_gid as u32
+    }
+
+    fn st_rdev(&self) -> u64 {
+        self.as_inner().as_inner().st_rdev as u64
+    }
+
+    fn st_size(&self) -> u64 {
+        self.as_inner().as_inner().st_size as u64
+    }
+
+    fn st_atime(&self) -> i64 {
+        self.as_inner().as_inner().st_atime as i64
+    }
+
+    fn st_atime_nsec(&self) -> i64 {
+        self.as_inner().as_inner().st_atime_nsec as i64
+    }
+
+    fn st_mtime(&self) -> i64 {
+        self.as_inner().as_inner().st_mtime as i64
+    }
+
+    fn st_mtime_nsec(&self) -> i64 {
+        self.as_inner().as_inner().st_mtime_nsec as i64
+    }
+
+    fn st_ctime(&self) -> i64 {
+        self.as_inner().as_inner().st_ctime as i64
+    }
+
+    fn st_ctime_nsec(&self) -> i64 {
+        self.as_inner().as_inner().st_ctime_nsec as i64
+    }
+
+    fn st_blksize(&self) -> u64 {
+        self.as_inner().as_inner().st_blksize as u64
+    }
+
+    fn st_blocks(&self) -> u64 {
+        self.as_inner().as_inner().st_blocks as u64
+    }
+}
diff --git a/library/std/src/os/managarm/mod.rs b/library/std/src/os/managarm/mod.rs
new file mode 100644
index 00000000..869966bb
--- /dev/null
+++ b/library/std/src/os/managarm/mod.rs
@@ -0,0 +1,6 @@
+//! Managarm-specific definitions
+
+#![stable(feature = "raw_ext", since = "1.1.0")]
+
+pub mod fs;
+pub mod raw;
diff --git a/library/std/src/os/managarm/raw.rs b/library/std/src/os/managarm/raw.rs
new file mode 100644
index 00000000..ce950064
--- /dev/null
+++ b/library/std/src/os/managarm/raw.rs
@@ -0,0 +1,74 @@
+#![stable(feature = "raw_ext", since = "1.1.0")]
+#![deprecated(
+    since = "1.8.0",
+    note = "these type aliases are no longer supported by \
+              the standard library, the `libc` crate on \
+              crates.io should be used instead for the correct \
+              definitions"
+)]
+#![allow(deprecated)]
+
+#[stable(feature = "pthread_t", since = "1.8.0")]
+pub type pthread_t = usize; // TODO: This is completely wrong tbh
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type dev_t = libc::dev_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type ino_t = libc::ino_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type mode_t = libc::mode_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type nlink_t = libc::nlink_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type off_t = libc::off_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type time_t = libc::time_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type blkcnt_t = libc::blkcnt_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type blksize_t = libc::blksize_t;
+
+#[repr(C)]
+#[derive(Clone)]
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub struct stat {
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_dev: libc::dev_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_ino: libc::ino_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_mode: libc::mode_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_nlink: libc::nlink_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_uid: libc::uid_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_gid: libc::gid_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_rdev: libc::dev_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_size: libc::off_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_atime: libc::time_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_atime_nsec: libc::c_long,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_mtime: libc::time_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_mtime_nsec: libc::c_long,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_ctime: libc::time_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_ctime_nsec: libc::c_long,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_blksize: libc::blksize_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_blocks: libc::blkcnt_t,
+}
diff --git a/library/std/src/os/mod.rs b/library/std/src/os/mod.rs
index ab7734a7..fcd8fdd6 100644
--- a/library/std/src/os/mod.rs
+++ b/library/std/src/os/mod.rs
@@ -155,6 +155,8 @@ pub mod windows {}
 pub mod l4re;
 #[cfg(target_os = "macos")]
 pub mod macos;
+#[cfg(target_os = "managarm")]
+pub mod managarm;
 #[cfg(target_os = "netbsd")]
 pub mod netbsd;
 #[cfg(target_os = "nto")]
diff --git a/library/std/src/os/unix/mod.rs b/library/std/src/os/unix/mod.rs
index 78c95727..d465c2ee 100644
--- a/library/std/src/os/unix/mod.rs
+++ b/library/std/src/os/unix/mod.rs
@@ -67,6 +67,8 @@ mod platform {
     pub use crate::os::l4re::*;
     #[cfg(target_os = "linux")]
     pub use crate::os::linux::*;
+    #[cfg(target_os = "managarm")]
+    pub use crate::os::managarm::*;
     #[cfg(target_os = "netbsd")]
     pub use crate::os::netbsd::*;
     #[cfg(target_os = "nto")]
diff --git a/library/std/src/sys/args/unix.rs b/library/std/src/sys/args/unix.rs
index 0dfbd5f0..696ebd32 100644
--- a/library/std/src/sys/args/unix.rs
+++ b/library/std/src/sys/args/unix.rs
@@ -84,6 +84,7 @@ pub fn args() -> Args {
     target_os = "hurd",
     target_os = "rtems",
     target_os = "nuttx",
+    target_os = "managarm",
 ))]
 mod imp {
     use crate::ffi::c_char;
diff --git a/library/std/src/sys/env_consts.rs b/library/std/src/sys/env_consts.rs
index 9683fd47..ab02fced 100644
--- a/library/std/src/sys/env_consts.rs
+++ b/library/std/src/sys/env_consts.rs
@@ -202,6 +202,17 @@ pub mod os {
     pub const EXE_EXTENSION: &str = "";
 }
 
+#[cfg(target_os = "managarm")]
+pub mod os {
+    pub const FAMILY: &str = "unix";
+    pub const OS: &str = "managarm";
+    pub const DLL_PREFIX: &str = "lib";
+    pub const DLL_SUFFIX: &str = ".so";
+    pub const DLL_EXTENSION: &str = "so";
+    pub const EXE_SUFFIX: &str = "";
+    pub const EXE_EXTENSION: &str = "";
+}
+
 #[cfg(target_os = "netbsd")]
 pub mod os {
     pub const FAMILY: &str = "unix";
diff --git a/library/std/src/sys/fd/unix.rs b/library/std/src/sys/fd/unix.rs
index cdca73cd..99e92a90 100644
--- a/library/std/src/sys/fd/unix.rs
+++ b/library/std/src/sys/fd/unix.rs
@@ -541,6 +541,7 @@ fn pwritev(
         target_os = "redox",
         target_os = "vxworks",
         target_os = "nto",
+        target_os = "managarm",
     )))]
     pub fn set_cloexec(&self) -> io::Result<()> {
         unsafe {
@@ -564,6 +565,7 @@ pub fn set_cloexec(&self) -> io::Result<()> {
         target_os = "redox",
         target_os = "vxworks",
         target_os = "nto",
+        target_os = "managarm",
     ))]
     pub fn set_cloexec(&self) -> io::Result<()> {
         unsafe {
diff --git a/library/std/src/sys/fs/unix.rs b/library/std/src/sys/fs/unix.rs
index dc278274..ae29bed9 100644
--- a/library/std/src/sys/fs/unix.rs
+++ b/library/std/src/sys/fs/unix.rs
@@ -14,6 +14,7 @@
     target_os = "fuchsia",
     target_os = "hurd",
     target_os = "illumos",
+    target_os = "managarm"
 ))]
 use libc::dirfd;
 #[cfg(any(target_os = "fuchsia", target_os = "illumos"))]
@@ -44,9 +45,10 @@
     target_os = "nto",
     target_os = "vita",
     target_os = "hurd",
+    target_os = "managarm",
 )))]
 use libc::readdir_r as readdir64_r;
-#[cfg(any(all(target_os = "linux", not(target_env = "musl")), target_os = "hurd"))]
+#[cfg(any(all(target_os = "linux", not(target_env = "musl")), target_os = "hurd", target_os = "managarm"))]
 use libc::readdir64;
 #[cfg(target_os = "l4re")]
 use libc::readdir64_r;
@@ -280,6 +282,7 @@ unsafe impl Sync for Dir {}
     target_os = "nto",
     target_os = "vita",
     target_os = "hurd",
+    target_os = "managarm",
 ))]
 pub struct DirEntry {
     dir: Arc<InnerReadDir>,
@@ -304,6 +307,7 @@ pub struct DirEntry {
     target_os = "nto",
     target_os = "vita",
     target_os = "hurd",
+    target_os = "managarm",
 ))]
 struct dirent64_min {
     d_ino: u64,
@@ -328,6 +332,7 @@ struct dirent64_min {
     target_os = "nto",
     target_os = "vita",
     target_os = "hurd",
+    target_os = "managarm",
 )))]
 pub struct DirEntry {
     dir: Arc<InnerReadDir>,
@@ -707,6 +712,7 @@ impl Iterator for ReadDir {
         target_os = "nto",
         target_os = "vita",
         target_os = "hurd",
+        target_os = "managarm",
     ))]
     fn next(&mut self) -> Option<io::Result<DirEntry>> {
         use crate::sys::os::{errno, set_errno};
@@ -800,6 +806,7 @@ fn next(&mut self) -> Option<io::Result<DirEntry>> {
         target_os = "nto",
         target_os = "vita",
         target_os = "hurd",
+        target_os = "managarm",
     )))]
     fn next(&mut self) -> Option<io::Result<DirEntry>> {
         if self.end_of_stream {
@@ -987,6 +994,7 @@ pub fn file_type(&self) -> io::Result<FileType> {
         target_os = "nto",
         target_os = "hurd",
         target_os = "rtems",
+        target_os = "managarm",
         target_vendor = "apple",
     ))]
     pub fn ino(&self) -> u64 {
@@ -1048,6 +1056,7 @@ fn name_bytes(&self) -> &[u8] {
         target_os = "nto",
         target_os = "vita",
         target_os = "hurd",
+        target_os = "managarm",
     )))]
     fn name_cstr(&self) -> &CStr {
         unsafe { CStr::from_ptr(self.entry.d_name.as_ptr()) }
@@ -1063,6 +1072,7 @@ fn name_cstr(&self) -> &CStr {
         target_os = "nto",
         target_os = "vita",
         target_os = "hurd",
+        target_os = "managarm",
     ))]
     fn name_cstr(&self) -> &CStr {
         &self.name
@@ -1237,6 +1247,7 @@ unsafe fn os_datasync(fd: c_int) -> c_int {
             target_os = "openbsd",
             target_os = "nto",
             target_os = "hurd",
+            target_os = "managarm",
         ))]
         unsafe fn os_datasync(fd: c_int) -> c_int {
             libc::fdatasync(fd)
@@ -1251,6 +1262,7 @@ unsafe fn os_datasync(fd: c_int) -> c_int {
             target_os = "openbsd",
             target_os = "nto",
             target_os = "hurd",
+            target_os = "managarm",
             target_vendor = "apple",
         )))]
         unsafe fn os_datasync(fd: c_int) -> c_int {
@@ -1661,7 +1673,7 @@ unsafe fn from_raw_fd(raw_fd: RawFd) -> Self {
 
 impl fmt::Debug for File {
     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
-        #[cfg(any(target_os = "linux", target_os = "illumos", target_os = "solaris"))]
+        #[cfg(any(target_os = "linux", target_os = "illumos", target_os = "solaris", target_os = "managarm",))]
         fn get_path(fd: c_int) -> Option<PathBuf> {
             let mut p = PathBuf::from("/proc/self/fd");
             p.push(&fd.to_string());
@@ -1722,6 +1734,7 @@ fn get_path(fd: c_int) -> Option<PathBuf> {
 
         #[cfg(not(any(
             target_os = "linux",
+            target_os = "managarm",
             target_os = "vxworks",
             target_os = "freebsd",
             target_os = "netbsd",
diff --git a/library/std/src/sys/net/connection/socket.rs b/library/std/src/sys/net/connection/socket.rs
index 7301bde6..5a5152c8 100644
--- a/library/std/src/sys/net/connection/socket.rs
+++ b/library/std/src/sys/net/connection/socket.rs
@@ -60,7 +60,7 @@
         target_os = "openbsd", target_os = "netbsd",
         target_os = "solaris", target_os = "illumos",
         target_os = "haiku", target_os = "nto",
-        target_os = "cygwin"))] {
+        target_os = "cygwin", target_os = "managarm"))] {
         use libc::MSG_NOSIGNAL;
     } else {
         const MSG_NOSIGNAL: c_int = 0x0;
diff --git a/library/std/src/sys/pal/unix/os.rs b/library/std/src/sys/pal/unix/os.rs
index 850bdfdf..a4e20747 100644
--- a/library/std/src/sys/pal/unix/os.rs
+++ b/library/std/src/sys/pal/unix/os.rs
@@ -34,6 +34,7 @@
             target_os = "fuchsia",
             target_os = "l4re",
             target_os = "hurd",
+            target_os = "managarm",
         ),
         link_name = "__errno_location"
     )]
@@ -408,6 +409,7 @@ pub fn current_exe() -> io::Result<PathBuf> {
     target_os = "hurd",
     target_os = "android",
     target_os = "nuttx",
+    target_os = "managarm",
     target_os = "emscripten"
 ))]
 pub fn current_exe() -> io::Result<PathBuf> {
diff --git a/library/std/src/sys/pal/unix/thread.rs b/library/std/src/sys/pal/unix/thread.rs
index 5f2b81b0..2eae010e 100644
--- a/library/std/src/sys/pal/unix/thread.rs
+++ b/library/std/src/sys/pal/unix/thread.rs
@@ -136,12 +136,13 @@ pub fn set_name(name: &CStr) {
         target_os = "freebsd",
         target_os = "dragonfly",
         target_os = "nuttx",
-        target_os = "cygwin"
+        target_os = "cygwin",
+        target_os = "managarm"
     ))]
     pub fn set_name(name: &CStr) {
         unsafe {
             cfg_if::cfg_if! {
-                if #[cfg(any(target_os = "linux", target_os = "cygwin"))] {
+                if #[cfg(any(target_os = "linux", target_os = "cygwin", target_os = "managarm"))] {
                     // Linux and Cygwin limits the allowed length of the name.
                     const TASK_COMM_LEN: usize = 16;
                     let name = truncate_cstr::<{ TASK_COMM_LEN }>(name);
@@ -335,6 +336,7 @@ fn drop(&mut self) {
     target_os = "illumos",
     target_os = "vxworks",
     target_os = "cygwin",
+    target_os = "managarm",
     target_vendor = "apple",
 ))]
 fn truncate_cstr<const MAX_WITH_NUL: usize>(cstr: &CStr) -> [libc::c_char; MAX_WITH_NUL] {
@@ -356,6 +358,7 @@ pub fn available_parallelism() -> io::Result<NonZero<usize>> {
             target_os = "aix",
             target_vendor = "apple",
             target_os = "cygwin",
+            target_os = "managarm",
         ))] {
             #[allow(unused_assignments)]
             #[allow(unused_mut)]
diff --git a/library/std/src/sys/random/mod.rs b/library/std/src/sys/random/mod.rs
index 013e886a..4e23a1f7 100644
--- a/library/std/src/sys/random/mod.rs
+++ b/library/std/src/sys/random/mod.rs
@@ -43,6 +43,7 @@
         target_os = "aix",
         target_os = "hurd",
         target_os = "l4re",
+        target_os = "managarm",
         target_os = "nto",
         target_os = "nuttx",
     ))] {
diff --git a/library/unwind/src/lib.rs b/library/unwind/src/lib.rs
index 5451a38a..70c8ac2c 100644
--- a/library/unwind/src/lib.rs
+++ b/library/unwind/src/lib.rs
@@ -184,3 +184,7 @@
 #[link(name = "unwind", kind = "static", modifiers = "-bundle", cfg(target_feature = "crt-static"))]
 #[link(name = "unwind", cfg(not(target_feature = "crt-static")))]
 unsafe extern "C" {}
+
+#[cfg(target_os = "managarm")]
+#[link(name = "gcc_s")]
+unsafe extern "C" {}
-- 
2.51.0

